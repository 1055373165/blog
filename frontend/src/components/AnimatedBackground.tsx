import React, { useEffect, useState, useRef } from 'react';\nimport { clsx } from 'clsx';\n\ninterface AnimatedBackgroundProps {\n  variant?: 'grid' | 'particles' | 'waves' | 'matrix';\n  intensity?: 'low' | 'medium' | 'high';\n  className?: string;\n  enableScrollEffect?: boolean;\n}\n\n// 网格动画背景\nconst GridBackground = ({ intensity, enableScrollEffect }: { intensity: string; enableScrollEffect?: boolean }) => {\n  const [scrollY, setScrollY] = useState(0);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n\n  useEffect(() => {\n    if (!enableScrollEffect) return;\n\n    const handleScroll = () => setScrollY(window.scrollY);\n    const handleMouseMove = (e: MouseEvent) => {\n      setMousePosition({\n        x: (e.clientX / window.innerWidth - 0.5) * 2,\n        y: (e.clientY / window.innerHeight - 0.5) * 2\n      });\n    };\n\n    window.addEventListener('scroll', handleScroll, { passive: true });\n    window.addEventListener('mousemove', handleMouseMove, { passive: true });\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n      window.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [enableScrollEffect]);\n\n  const getGridSize = () => {\n    switch (intensity) {\n      case 'high': return 20;\n      case 'medium': return 30;\n      case 'low': default: return 40;\n    }\n  };\n\n  const gridSize = getGridSize();\n\n  return (\n    <div className=\"absolute inset-0 overflow-hidden opacity-30 dark:opacity-20\">\n      {/* 主网格 */}\n      <div \n        className=\"absolute inset-0\"\n        style={{\n          backgroundImage: `\n            linear-gradient(rgba(59, 130, 246, 0.1) 1px, transparent 1px),\n            linear-gradient(90deg, rgba(59, 130, 246, 0.1) 1px, transparent 1px)\n          `,\n          backgroundSize: `${gridSize}px ${gridSize}px`,\n          transform: `translate3d(${mousePosition.x * 10}px, ${mousePosition.y * 10 + scrollY * 0.1}px, 0)`\n        }}\n      />\n      \n      {/* 次级网格 */}\n      <div \n        className=\"absolute inset-0\"\n        style={{\n          backgroundImage: `\n            linear-gradient(rgba(14, 165, 233, 0.05) 1px, transparent 1px),\n            linear-gradient(90deg, rgba(14, 165, 233, 0.05) 1px, transparent 1px)\n          `,\n          backgroundSize: `${gridSize * 5}px ${gridSize * 5}px`,\n          transform: `translate3d(${mousePosition.x * -5}px, ${mousePosition.y * -5 + scrollY * 0.05}px, 0)`\n        }}\n      />\n      \n      {/* 动态节点 */}\n      {Array.from({ length: intensity === 'high' ? 12 : intensity === 'medium' ? 8 : 4 }).map((_, i) => (\n        <div\n          key={i}\n          className=\"absolute w-2 h-2 bg-primary-500/20 rounded-full animate-pulse\"\n          style={{\n            left: `${(i * 23 + 10) % 90}%`,\n            top: `${(i * 31 + 15) % 85}%`,\n            animationDelay: `${i * 0.5}s`,\n            animationDuration: `${2 + (i % 3)}s`,\n            transform: `translate3d(${mousePosition.x * (i % 3) * 5}px, ${mousePosition.y * (i % 3) * 5 + scrollY * 0.02}px, 0)`\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\n// 粒子动画背景\nconst ParticleBackground = ({ intensity }: { intensity: string }) => {\n  const particleCount = intensity === 'high' ? 50 : intensity === 'medium' ? 30 : 15;\n  \n  return (\n    <div className=\"absolute inset-0 overflow-hidden\">\n      {Array.from({ length: particleCount }).map((_, i) => {\n        const size = Math.random() * 4 + 1;\n        const duration = Math.random() * 20 + 10;\n        const delay = Math.random() * 20;\n        \n        return (\n          <div\n            key={i}\n            className=\"absolute opacity-20 dark:opacity-10\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n              width: `${size}px`,\n              height: `${size}px`,\n              backgroundColor: ['#3b82f6', '#14b8a6', '#8b5cf6'][i % 3],\n              borderRadius: '50%',\n              animation: `particleFloat ${duration}s linear infinite ${delay}s`\n            }}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\n// 波浪动画背景\nconst WaveBackground = ({ intensity }: { intensity: string }) => {\n  const waveCount = intensity === 'high' ? 4 : intensity === 'medium' ? 3 : 2;\n  \n  return (\n    <div className=\"absolute inset-0 overflow-hidden\">\n      {Array.from({ length: waveCount }).map((_, i) => (\n        <div\n          key={i}\n          className=\"absolute inset-0 opacity-10 dark:opacity-5\"\n          style={{\n            background: `radial-gradient(ellipse at ${50 + i * 30}% ${50 + i * 20}%, rgba(59, 130, 246, 0.1) 0%, transparent 70%)`,\n            animation: `waveMotion ${15 + i * 5}s ease-in-out infinite ${i * 2}s`,\n            transform: `scale(${1 + i * 0.2})`\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\n// 矩阵代码雨背景\nconst MatrixBackground = ({ intensity }: { intensity: string }) => {\n  const [matrixChars, setMatrixChars] = useState<string[]>([]);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  \n  useEffect(() => {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%^&*(){}[]<>?/|\\\\~`'.split('');\n    setMatrixChars(chars);\n    \n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    \n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    \n    const columns = Math.floor(canvas.width / 20);\n    const drops: number[] = new Array(columns).fill(1);\n    \n    const dropCount = intensity === 'high' ? columns : intensity === 'medium' ? columns * 0.7 : columns * 0.4;\n    \n    const draw = () => {\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      ctx.fillStyle = 'rgba(59, 130, 246, 0.3)';\n      ctx.font = '15px monospace';\n      \n      for (let i = 0; i < dropCount; i++) {\n        const text = chars[Math.floor(Math.random() * chars.length)];\n        ctx.fillText(text, i * 20, drops[i] * 20);\n        \n        if (drops[i] * 20 > canvas.height && Math.random() > 0.975) {\n          drops[i] = 0;\n        }\n        drops[i]++;\n      }\n    };\n    \n    const interval = setInterval(draw, 100);\n    \n    const handleResize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    \n    window.addEventListener('resize', handleResize);\n    \n    return () => {\n      clearInterval(interval);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [intensity, matrixChars]);\n  \n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"absolute inset-0 opacity-10 dark:opacity-5 pointer-events-none\"\n      style={{ mixBlendMode: 'multiply' }}\n    />\n  );\n};\n\n// 滚动进度指示器\nconst ScrollProgressIndicator = () => {\n  const [scrollProgress, setScrollProgress] = useState(0);\n  \n  useEffect(() => {\n    const updateScrollProgress = () => {\n      const scrollTop = window.scrollY;\n      const documentHeight = document.documentElement.scrollHeight - window.innerHeight;\n      const progress = scrollTop / documentHeight;\n      setScrollProgress(Math.min(Math.max(progress, 0), 1));\n    };\n    \n    window.addEventListener('scroll', updateScrollProgress, { passive: true });\n    updateScrollProgress();\n    \n    return () => window.removeEventListener('scroll', updateScrollProgress);\n  }, []);\n  \n  return (\n    <>\n      {/* 顶部进度条 */}\n      <div className=\"fixed top-0 left-0 right-0 z-50 h-1 bg-gray-200/30 dark:bg-gray-800/30\">\n        <div \n          className=\"h-full bg-gradient-to-r from-primary-500 to-go-500 transition-all duration-150 ease-out\"\n          style={{ width: `${scrollProgress * 100}%` }}\n        />\n      </div>\n      \n      {/* 侧边进度指示器 */}\n      <div className=\"fixed right-6 top-1/2 transform -translate-y-1/2 z-50 hidden lg:block\">\n        <div className=\"w-1 h-32 bg-gray-200/30 dark:bg-gray-800/30 rounded-full overflow-hidden\">\n          <div \n            className=\"w-full bg-gradient-to-t from-primary-500 to-go-500 rounded-full transition-all duration-150 ease-out\"\n            style={{ height: `${scrollProgress * 100}%` }}\n          />\n        </div>\n        \n        {/* 进度百分比 */}\n        <div className=\"absolute -right-12 top-1/2 transform -translate-y-1/2 text-xs text-gray-500 dark:text-gray-400 font-mono\">\n          {Math.round(scrollProgress * 100)}%\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default function AnimatedBackground({\n  variant = 'grid',\n  intensity = 'medium',\n  className,\n  enableScrollEffect = true\n}: AnimatedBackgroundProps) {\n  const [isVisible, setIsVisible] = useState(false);\n  \n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n  \n  const renderBackground = () => {\n    switch (variant) {\n      case 'particles':\n        return <ParticleBackground intensity={intensity} />;\n      case 'waves':\n        return <WaveBackground intensity={intensity} />;\n      case 'matrix':\n        return <MatrixBackground intensity={intensity} />;\n      case 'grid':\n      default:\n        return <GridBackground intensity={intensity} enableScrollEffect={enableScrollEffect} />;\n    }\n  };\n  \n  return (\n    <>\n      <div className={clsx(\n        'fixed inset-0 pointer-events-none transition-opacity duration-1000 z-0',\n        isVisible ? 'opacity-100' : 'opacity-0',\n        className\n      )}>\n        {renderBackground()}\n      </div>\n      \n      <ScrollProgressIndicator />\n    </>\n  );\n}"