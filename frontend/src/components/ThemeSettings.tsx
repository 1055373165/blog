import React, { useState } from 'react';
import { useTheme, ColorTheme, CodeTheme, FontFamily, FontWeight, LineHeight } from '../contexts/ThemeContext';

interface ThemeSettingsProps {
  isOpen: boolean;
  onClose: () => void;
}

const colorThemeOptions: Array<{ value: ColorTheme; label: string; icon: string }> = [
  { value: 'light', label: 'ÊµÖËâ≤‰∏ªÈ¢ò', icon: '‚òÄÔ∏è' },
  { value: 'dark', label: 'Ê∑±Ëâ≤‰∏ªÈ¢ò', icon: 'üåô' },
  { value: 'system', label: 'Ë∑üÈöèÁ≥ªÁªü', icon: 'üíª' },
];

const codeThemeOptions: Array<{ value: CodeTheme; label: string; preview: string; category: string }> = [
  // ÁªèÂÖ∏‰∏ªÈ¢ò
  { value: 'vs', label: 'VS Light', preview: '#FFFFFF', category: 'ÁªèÂÖ∏' },
  { value: 'vscDarkPlus', label: 'VS Dark+', preview: '#1E1E1E', category: 'ÁªèÂÖ∏' },
  { value: 'github', label: 'GitHub Light', preview: '#F6F8FA', category: 'ÁªèÂÖ∏' },
  { value: 'tomorrow', label: 'Tomorrow', preview: '#FFFFFF', category: 'ÁªèÂÖ∏' },
  { value: 'twilight', label: 'Twilight', preview: '#141414', category: 'ÁªèÂÖ∏' },
  { value: 'monokai', label: 'Monokai', preview: '#272822', category: 'ÁªèÂÖ∏' },
  { value: 'dracula', label: 'Dracula', preview: '#282A36', category: 'ÁªèÂÖ∏' },
  { value: 'nord', label: 'Nord', preview: '#2E3440', category: 'ÁªèÂÖ∏' },
  { value: 'oneLight', label: 'One Light', preview: '#FAFAFA', category: 'ÁªèÂÖ∏' },
  { value: 'oneDark', label: 'One Dark', preview: '#282C34', category: 'ÁªèÂÖ∏' },
  
  // Áé∞‰ª£Âåñ‰∏ªÈ¢ò
  { value: 'materialDark', label: 'Material Dark', preview: '#263238', category: 'Áé∞‰ª£' },
  { value: 'materialLight', label: 'Material Light', preview: '#FAFAFA', category: 'Áé∞‰ª£' },
  { value: 'atomDark', label: 'Atom Dark', preview: '#1D1F21', category: 'Áé∞‰ª£' },
  { value: 'coldarkCold', label: 'Coldark Cold', preview: '#E3F6F5', category: 'Áé∞‰ª£' },
  { value: 'coldarkDark', label: 'Coldark Dark', preview: '#111B27', category: 'Áé∞‰ª£' },
  { value: 'nightOwl', label: 'Night Owl', preview: '#011627', category: 'Áé∞‰ª£' },
  { value: 'synthwave84', label: 'Synthwave 84', preview: '#262335', category: 'Áé∞‰ª£' },
  { value: 'shadesOfPurple', label: 'Shades of Purple', preview: '#2D2B55', category: 'Áé∞‰ª£' },
  { value: 'lucario', label: 'Lucario', preview: '#2B3E50', category: 'Áé∞‰ª£' },
  { value: 'okaidia', label: 'Okaidia', preview: '#272822', category: 'Áé∞‰ª£' },
  { value: 'darcula', label: 'Darcula', preview: '#2B2B2B', category: 'Áé∞‰ª£' },
  { value: 'solarizedlight', label: 'Solarized Light', preview: '#FDF6E3', category: 'Áé∞‰ª£' },
  { value: 'prism', label: 'Prism', preview: '#FFFFFF', category: 'Áé∞‰ª£' },
  { value: 'base16AteliersulphurpoolLight', label: 'Base16 Sulphurpool', preview: '#F5F7FF', category: 'Áé∞‰ª£' },
  
  // HLJS‰∏ªÈ¢òÁ≥ªÂàó
  { value: 'atelierCaveLight', label: 'Atelier Cave Light', preview: '#EFECF4', category: 'HLJS' },
  { value: 'atelierCaveDark', label: 'Atelier Cave Dark', preview: '#19171C', category: 'HLJS' },
  { value: 'atelierDuneLight', label: 'Atelier Dune Light', preview: '#FEF6E7', category: 'HLJS' },
  { value: 'atelierDuneDark', label: 'Atelier Dune Dark', preview: '#20201D', category: 'HLJS' },
  { value: 'atelierEstuaryLight', label: 'Atelier Estuary Light', preview: '#F4F3EC', category: 'HLJS' },
  { value: 'atelierEstuaryDark', label: 'Atelier Estuary Dark', preview: '#22221B', category: 'HLJS' },
  { value: 'atelierForestLight', label: 'Atelier Forest Light', preview: '#F1F3F4', category: 'HLJS' },
  { value: 'atelierForestDark', label: 'Atelier Forest Dark', preview: '#1B1918', category: 'HLJS' },
  { value: 'atelierHeathLight', label: 'Atelier Heath Light', preview: '#F7F3F7', category: 'HLJS' },
  { value: 'atelierHeathDark', label: 'Atelier Heath Dark', preview: '#1B181B', category: 'HLJS' },
  { value: 'atelierLakesideLight', label: 'Atelier Lakeside Light', preview: '#EBF8FF', category: 'HLJS' },
  { value: 'atelierLakesideDark', label: 'Atelier Lakeside Dark', preview: '#161B1D', category: 'HLJS' },
  { value: 'atelierPlateauLight', label: 'Atelier Plateau Light', preview: '#F4ECEC', category: 'HLJS' },
  { value: 'atelierPlateauDark', label: 'Atelier Plateau Dark', preview: '#1B1818', category: 'HLJS' },
  { value: 'atelierSavannaLight', label: 'Atelier Savanna Light', preview: '#ECF4EE', category: 'HLJS' },
  { value: 'atelierSavannaDark', label: 'Atelier Savanna Dark', preview: '#171C19', category: 'HLJS' },
  { value: 'atelierSeasideLight', label: 'Atelier Seaside Light', preview: '#F4FBFF', category: 'HLJS' },
  { value: 'atelierSeasideDark', label: 'Atelier Seaside Dark', preview: '#131513', category: 'HLJS' },
  { value: 'atelierSulphurpoolLight', label: 'Atelier Sulphurpool Light', preview: '#F5F7FF', category: 'HLJS' },
  { value: 'atelierSulphurpoolDark', label: 'Atelier Sulphurpool Dark', preview: '#202746', category: 'HLJS' },
  
  // ÂèåËâ≤‰∏ªÈ¢ò
  { value: 'duotoneDark', label: 'Duotone Dark', preview: '#2A2734', category: 'ÂèåËâ≤' },
  { value: 'duotoneLight', label: 'Duotone Light', preview: '#FAF8F5', category: 'ÂèåËâ≤' },
];

const fontSizeOptions = [
  { value: 'sm' as const, label: 'Â∞èÂè∑', example: 'text-sm' },
  { value: 'base' as const, label: 'Ê†áÂáÜ', example: 'text-base' },
  { value: 'lg' as const, label: 'Â§ßÂè∑', example: 'text-lg' },
  { value: 'xl' as const, label: 'ÁâπÂ§ß', example: 'text-xl' },
];

export default function ThemeSettings({ isOpen, onClose }: ThemeSettingsProps) {
  const {
    settings,
    updateColorTheme,
    updateCodeTheme,
    updateFontSize,
    updateLineNumbers,
    updateWordWrap,
    updateFontSettings,
    resetToDefaults,
  } = useTheme();

  const [activeTab, setActiveTab] = useState<'appearance' | 'code' | 'typography' | 'fonts'>('appearance');

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-hidden">
      {/* ËÉåÊôØÈÅÆÁΩ© */}
      <div 
        className="absolute inset-0 bg-black bg-opacity-50 backdrop-blur-sm" 
        onClick={onClose}
      />
      
      {/* ËÆæÁΩÆÈù¢Êùø */}
      <div className="absolute right-0 top-0 h-full w-full sm:w-96 bg-white dark:bg-gray-800 shadow-xl">
        <div className="flex flex-col h-full">
          {/* Â§¥ÈÉ® */}
          <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
            <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
              ‰∏ªÈ¢òËÆæÁΩÆ
            </h2>
            <button
              onClick={onClose}
              className="p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md transition-colors"
            >
              <svg className="w-5 h-5 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          {/* Ê†áÁ≠æÈ°µ */}
          <div className="flex border-b border-gray-200 dark:border-gray-700 overflow-x-auto">
            {[
              { id: 'appearance' as const, label: 'Â§ñËßÇ', icon: 'üé®' },
              { id: 'code' as const, label: '‰ª£Á†Å', icon: 'üíª' },
              { id: 'typography' as const, label: 'ÊéíÁâà', icon: 'üìù' },
              { id: 'fonts' as const, label: 'Â≠ó‰Ωì', icon: 'üÖ∞Ô∏è' },
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex-1 px-2 sm:px-4 py-3 text-xs sm:text-sm font-medium transition-colors whitespace-nowrap min-w-0 ${
                  activeTab === tab.id
                    ? 'text-primary-600 dark:text-primary-400 border-b-2 border-primary-600 dark:border-primary-400'
                    : 'text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'
                }`}
              >
                <span className="mr-2">{tab.icon}</span>
                {tab.label}
              </button>
            ))}
          </div>

          {/* ÂÜÖÂÆπÂå∫ */}
          <div className="flex-1 overflow-y-auto p-3 sm:p-4">
            {activeTab === 'appearance' && (
              <div className="space-y-6">
                <div>
                  <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-3">
                    È¢úËâ≤‰∏ªÈ¢ò
                  </h3>
                  <div className="grid grid-cols-1 gap-2">
                    {colorThemeOptions.map((option) => (
                      <button
                        key={option.value}
                        onClick={() => updateColorTheme(option.value)}
                        className={`flex items-center p-3 rounded-lg border-2 transition-all ${
                          settings.colorTheme === option.value
                            ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20'
                            : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                        }`}
                      >
                        <span className="text-2xl mr-3">{option.icon}</span>
                        <span className="text-sm font-medium text-gray-900 dark:text-white">
                          {option.label}
                        </span>
                        {settings.colorTheme === option.value && (
                          <svg className="w-4 h-4 ml-auto text-primary-500" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                          </svg>
                        )}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'code' && (
              <div className="space-y-6">
                <div>
                  <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-4">
                    ‰ª£Á†ÅÈ´ò‰∫Æ‰∏ªÈ¢ò
                  </h3>
                  
                  {/* ÊåâÂàÜÁ±ªÊòæÁ§∫‰∏ªÈ¢ò */}
                  {['ÊûÅÂÆ¢', 'ÁÉ≠Èó®', 'Áé∞‰ª£', 'ÁªèÂÖ∏', 'Atelier', 'ÂèåËâ≤'].map((category) => {
                    const categoryThemes = codeThemeOptions.filter(option => option.category === category);
                    if (categoryThemes.length === 0) return null;
                    
                    return (
                      <div key={category} className="mb-6">
                        <h4 className="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-3">
                          {category === 'ÊûÅÂÆ¢' && 'üñ•Ô∏è '}{category === 'ÁÉ≠Èó®' && 'üî• '}{category === 'Áé∞‰ª£' && 'üé® '}{category === 'ÁªèÂÖ∏' && 'üìö '}{category === 'ÂèåËâ≤' && 'üé≠ '}{category === 'Atelier' && 'üèõÔ∏è '}
                          {category === 'ÊûÅÂÆ¢' ? 'ÊûÅÂÆ¢‰∏ªÈ¢ò' : category === 'ÁÉ≠Èó®' ? 'ÁÉ≠Èó®‰∏ªÈ¢ò' : category === 'Áé∞‰ª£' ? 'Áé∞‰ª£‰∏ªÈ¢ò' : category === 'ÁªèÂÖ∏' ? 'ÁªèÂÖ∏‰∏ªÈ¢ò' : category === 'ÂèåËâ≤' ? 'ÂèåËâ≤‰∏ªÈ¢ò' : 'Atelier Á≥ªÂàó'}
                        </h4>
                        <div className="grid grid-cols-1 gap-2">
                          {categoryThemes.map((option) => (
                            <button
                              key={option.value}
                              onClick={() => updateCodeTheme(option.value)}
                              className={`flex items-center p-3 rounded-lg border-2 transition-all ${
                                settings.codeTheme === option.value
                                  ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20'
                                  : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                              }`}
                            >
                              <div 
                                className="w-6 h-6 rounded border mr-3"
                                style={{ backgroundColor: option.preview }}
                              />
                              <span className="text-sm font-medium text-gray-900 dark:text-white">
                                {option.label}
                              </span>
                              {settings.codeTheme === option.value && (
                                <svg className="w-4 h-4 ml-auto text-primary-500" fill="currentColor" viewBox="0 0 20 20">
                                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                                </svg>
                              )}
                            </button>
                          ))}
                        </div>
                      </div>
                    );
                  })}
                </div>

                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <label className="text-sm font-medium text-gray-900 dark:text-white">
                      ÊòæÁ§∫Ë°åÂè∑
                    </label>
                    <button
                      onClick={() => updateLineNumbers(!settings.lineNumbers)}
                      className={`relative inline-flex h-6 w-11 rounded-full transition-colors ${
                        settings.lineNumbers ? 'bg-primary-600' : 'bg-gray-200 dark:bg-gray-700'
                      }`}
                    >
                      <span
                        className={`inline-block h-4 w-4 rounded-full bg-white transform transition-transform mt-1 ${
                          settings.lineNumbers ? 'translate-x-6' : 'translate-x-1'
                        }`}
                      />
                    </button>
                  </div>

                  <div className="flex items-center justify-between">
                    <label className="text-sm font-medium text-gray-900 dark:text-white">
                      Ëá™Âä®Êç¢Ë°å
                    </label>
                    <button
                      onClick={() => updateWordWrap(!settings.wordWrap)}
                      className={`relative inline-flex h-6 w-11 rounded-full transition-colors ${
                        settings.wordWrap ? 'bg-primary-600' : 'bg-gray-200 dark:bg-gray-700'
                      }`}
                    >
                      <span
                        className={`inline-block h-4 w-4 rounded-full bg-white transform transition-transform mt-1 ${
                          settings.wordWrap ? 'translate-x-6' : 'translate-x-1'
                        }`}
                      />
                    </button>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'typography' && (
              <div className="space-y-6">
                <div>
                  <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-3">
                    Â≠ó‰ΩìÂ§ßÂ∞è
                  </h3>
                  <div className="grid grid-cols-2 gap-2">
                    {fontSizeOptions.map((option) => (
                      <button
                        key={option.value}
                        onClick={() => updateFontSize(option.value)}
                        className={`p-3 rounded-lg border-2 transition-all ${
                          settings.fontSize === option.value
                            ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20'
                            : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                        }`}
                      >
                        <div className={`${option.example} font-medium text-gray-900 dark:text-white`}>
                          Aa
                        </div>
                        <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                          {option.label}
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'fonts' && (
              <div className="space-y-6">
                <FontFamilySelector />
                <FontWeightSelector />
              </div>
            )}
          </div>

          {/* Â∫ïÈÉ®Êìç‰Ωú */}
          <div className="p-4 border-t border-gray-200 dark:border-gray-700">
            <button
              onClick={resetToDefaults}
              className="w-full px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-md transition-colors"
            >
              ÊÅ¢Â§çÈªòËÆ§ËÆæÁΩÆ
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

// Â≠ó‰ΩìÁ≥ªÂàóÈÄâÊã©Âô®
function FontFamilySelector() {
  const { settings, updateFontSettings } = useTheme();

  const fontFamilyOptions: Array<{ 
    value: FontFamily; 
    label: string; 
    preview: string; 
    category: string; 
    description?: string; 
  }> = [
    // Á≥ªÁªüÂ≠ó‰Ωì
    { value: 'system', label: 'Á≥ªÁªüÈªòËÆ§', preview: 'System UI', category: 'Á≥ªÁªü' },
    
    // Ë•øÊñáÂ≠ó‰Ωì
    { value: 'inter', label: 'Inter', preview: 'Inter', category: 'Ë•øÊñá', description: 'Áé∞‰ª£ÂåñÊó†Ë°¨Á∫øÂ≠ó‰Ωì' },
    { value: 'roboto', label: 'Roboto', preview: 'Roboto', category: 'Ë•øÊñá', description: 'Google ËÆæËÆ°' },
    { value: 'open-sans', label: 'Open Sans', preview: 'Open Sans', category: 'Ë•øÊñá', description: 'ÂèãÂ•ΩÊòìËØª' },
    { value: 'lato', label: 'Lato', preview: 'Lato', category: 'Ë•øÊñá', description: '‰ºòÈõÖÁÆÄÊ¥Å' },
    { value: 'source-sans-pro', label: 'Source Sans Pro', preview: 'Source Sans Pro', category: 'Ë•øÊñá', description: 'Adobe Âá∫ÂìÅ' },
    { value: 'poppins', label: 'Poppins', preview: 'Poppins', category: 'Ë•øÊñá', description: 'Âá†‰ΩïÂúÜÊ∂¶' },
    { value: 'nunito', label: 'Nunito', preview: 'Nunito', category: 'Ë•øÊñá', description: 'ÂúÜÊ∂¶ÂèãÂ•Ω' },
    { value: 'work-sans', label: 'Work Sans', preview: 'Work Sans', category: 'Ë•øÊñá', description: 'Â∑•‰Ωú‰∏ìÁî®' },
    
    // ‰∏≠ÊñáÂ≠ó‰Ωì
    { value: 'noto-sans-sc', label: 'Noto Sans SC', preview: 'ÊÄùÊ∫êÈªë‰Ωì', category: '‰∏≠Êñá', description: 'Google ‰∏≠ÊñáÂ≠ó‰Ωì' },
    { value: 'source-han-sans', label: 'Source Han Sans', preview: 'ÊÄùÊ∫êÈªë‰Ωì', category: '‰∏≠Êñá', description: 'Adobe ‰∏≠ÊñáÂ≠ó‰Ωì' },
    { value: 'pingfang-sc', label: 'PingFang SC', preview: 'ËãπÊñπ', category: '‰∏≠Êñá', description: 'Apple ‰∏≠ÊñáÂ≠ó‰Ωì' },
    { value: 'microsoft-yahei', label: 'Microsoft YaHei', preview: 'ÂæÆËΩØÈõÖÈªë', category: '‰∏≠Êñá', description: 'Windows Á≥ªÁªüÂ≠ó‰Ωì' },
    { value: 'hiragino-sans-gb', label: 'Hiragino Sans GB', preview: 'ÂÜ¨ÈùíÈªë‰Ωì', category: '‰∏≠Êñá', description: 'macOS ‰∏≠ÊñáÂ≠ó‰Ωì' },
    { value: 'dengxian', label: 'DengXian', preview: 'Á≠âÁ∫ø', category: '‰∏≠Êñá', description: 'Office Â≠ó‰Ωì' },
    { value: 'simhei', label: 'SimHei', preview: 'Èªë‰Ωì', category: '‰∏≠Êñá', description: 'ÁªèÂÖ∏Èªë‰Ωì' },
    { value: 'simsun', label: 'SimSun', preview: 'ÂÆã‰Ωì', category: '‰∏≠Êñá', description: 'ÁªèÂÖ∏ÂÆã‰Ωì' },
    { value: 'kaiti', label: 'KaiTi', preview: 'Ê•∑‰Ωì', category: '‰∏≠Êñá', description: 'ÁªèÂÖ∏Ê•∑‰π¶' },
    { value: 'fangsong', label: 'FangSong', preview: '‰ªøÂÆã', category: '‰∏≠Êñá', description: '‰º†Áªü‰ªøÂÆã‰Ωì' },
    
    // Á≠âÂÆΩÂ≠ó‰Ωì
    { value: 'jetbrains-mono', label: 'JetBrains Mono', preview: 'JetBrains Mono', category: 'Á≠âÂÆΩ', description: 'ÁºñÁ®ã‰∏ìÁî®' },
    { value: 'fira-code', label: 'Fira Code', preview: 'Fira Code', category: 'Á≠âÂÆΩ', description: 'ËøûÂ≠óÊîØÊåÅ' },
    { value: 'source-code-pro', label: 'Source Code Pro', preview: 'Source Code Pro', category: 'Á≠âÂÆΩ', description: 'Adobe Á≠âÂÆΩ' },
    { value: 'cascadia-code', label: 'Cascadia Code', preview: 'Cascadia Code', category: 'Á≠âÂÆΩ', description: 'VS Code Â≠ó‰Ωì' },
    { value: 'sf-mono', label: 'SF Mono', preview: 'SF Mono', category: 'Á≠âÂÆΩ', description: 'Apple Á≠âÂÆΩ' },
    { value: 'consolas', label: 'Consolas', preview: 'Consolas', category: 'Á≠âÂÆΩ', description: 'Windows Á≠âÂÆΩ' },
    { value: 'menlo', label: 'Menlo', preview: 'Menlo', category: 'Á≠âÂÆΩ', description: 'macOS Á≠âÂÆΩ' },
  ];

  return (
    <div>
      <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-4">
        Â≠ó‰ΩìÁ≥ªÂàó
      </h3>
      
      {/* Ê≠£ÊñáÂ≠ó‰Ωì */}
      <div className="mb-6">
        <h4 className="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-3">
          üìñ Ê≠£ÊñáÂ≠ó‰Ωì
        </h4>
        <FontCategoryGrid
          options={fontFamilyOptions}
          currentValue={settings.fonts.body}
          onSelect={(value) => updateFontSettings({ body: value })}
        />
      </div>

      {/* Ê†áÈ¢òÂ≠ó‰Ωì */}
      <div className="mb-6">
        <h4 className="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-3">
          üìù Ê†áÈ¢òÂ≠ó‰Ωì
        </h4>
        <FontCategoryGrid
          options={fontFamilyOptions}
          currentValue={settings.fonts.heading}
          onSelect={(value) => updateFontSettings({ heading: value })}
        />
      </div>

      {/* ‰ª£Á†ÅÂ≠ó‰Ωì */}
      <div>
        <h4 className="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-3">
          üíª ‰ª£Á†ÅÂ≠ó‰Ωì
        </h4>
        <FontCategoryGrid
          options={fontFamilyOptions.filter(opt => opt.category === 'Á≠âÂÆΩ')}
          currentValue={settings.fonts.code}
          onSelect={(value) => updateFontSettings({ code: value })}
        />
      </div>
    </div>
  );
}

// Â≠ó‰ΩìÁ≤óÁªÜÈÄâÊã©Âô®
function FontWeightSelector() {
  const { settings, updateFontSettings } = useTheme();

  const fontWeightOptions: Array<{ value: FontWeight; label: string; example: string }> = [
    { value: 'thin', label: 'ÊûÅÁªÜ', example: 'font-thin' },
    { value: 'light', label: 'ÁªÜ‰Ωì', example: 'font-light' },
    { value: 'normal', label: 'Ê≠£Â∏∏', example: 'font-normal' },
    { value: 'medium', label: '‰∏≠Á≠â', example: 'font-medium' },
    { value: 'semibold', label: 'ÂçäÁ≤ó', example: 'font-semibold' },
    { value: 'bold', label: 'Á≤ó‰Ωì', example: 'font-bold' },
  ];

  return (
    <div>
      <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-3">
        Â≠ó‰ΩìÁ≤óÁªÜ
      </h3>
      <div className="grid grid-cols-3 gap-2">
        {fontWeightOptions.map((option) => (
          <button
            key={option.value}
            onClick={() => updateFontSettings({ weight: option.value })}
            className={`p-3 rounded-lg border-2 transition-all ${
              settings.fonts.weight === option.value
                ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20'
                : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
            }`}
          >
            <div className={`${option.example} text-gray-900 dark:text-white text-lg`}>
              Aa
            </div>
            <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
              {option.label}
            </div>
          </button>
        ))}
      </div>
    </div>
  );
}


// Â≠ó‰ΩìÂàÜÁ±ªÁΩëÊ†ºÁªÑ‰ª∂
function FontCategoryGrid({ 
  options, 
  currentValue, 
  onSelect 
}: { 
  options: Array<{ value: FontFamily; label: string; preview: string; category: string; description?: string }>; 
  currentValue: FontFamily; 
  onSelect: (value: FontFamily) => void; 
}) {
  const categories = ['Á≥ªÁªü', '‰∏≠Êñá', 'Ë•øÊñá', 'Á≠âÂÆΩ'];
  
  return (
    <div className="space-y-4">
      {categories.map((category) => {
        const categoryOptions = options.filter(opt => opt.category === category);
        if (categoryOptions.length === 0) return null;
        
        return (
          <div key={category}>
            <div className="grid grid-cols-1 gap-2">
              {categoryOptions.map((option) => (
                <button
                  key={option.value}
                  onClick={() => onSelect(option.value)}
                  className={`flex items-center justify-between p-3 rounded-lg border-2 transition-all ${
                    currentValue === option.value
                      ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20'
                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                  }`}
                >
                  <div className="flex items-center">
                    <div className="text-sm font-medium text-gray-900 dark:text-white">
                      {option.label}
                    </div>
                    {option.description && (
                      <div className="text-xs text-gray-500 dark:text-gray-400 ml-2">
                        {option.description}
                      </div>
                    )}
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-300 font-mono">
                    {option.preview}
                  </div>
                  {currentValue === option.value && (
                    <svg className="w-4 h-4 text-primary-500 ml-2" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                  )}
                </button>
              ))}
            </div>
          </div>
        );
      })}
    </div>
  );
}