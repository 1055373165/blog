import { useEffect, useRef, useState, useCallback } from 'react';\n\n// 键盘导航Hook\nexport const useKeyboardNavigation = (itemCount: number, onSelect?: (index: number) => void) => {\n  const [focusedIndex, setFocusedIndex] = useState(-1);\n  const [isNavigating, setIsNavigating] = useState(false);\n  const itemRefs = useRef<(HTMLElement | null)[]>([]);\n\n  const setItemRef = useCallback((index: number) => (el: HTMLElement | null) => {\n    itemRefs.current[index] = el;\n  }, []);\n\n  const focusItem = useCallback((index: number) => {\n    if (index >= 0 && index < itemCount && itemRefs.current[index]) {\n      itemRefs.current[index]?.focus();\n      setFocusedIndex(index);\n    }\n  }, [itemCount]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!isNavigating) return;\n\n      switch (e.key) {\n        case 'ArrowDown':\n        case 'j': // vim-style navigation\n          e.preventDefault();\n          setFocusedIndex(prev => {\n            const next = (prev + 1) % itemCount;\n            focusItem(next);\n            return next;\n          });\n          break;\n        \n        case 'ArrowUp':\n        case 'k': // vim-style navigation\n          e.preventDefault();\n          setFocusedIndex(prev => {\n            const next = prev <= 0 ? itemCount - 1 : prev - 1;\n            focusItem(next);\n            return next;\n          });\n          break;\n        \n        case 'Home':\n          e.preventDefault();\n          focusItem(0);\n          break;\n        \n        case 'End':\n          e.preventDefault();\n          focusItem(itemCount - 1);\n          break;\n        \n        case 'Enter':\n        case ' ':\n          e.preventDefault();\n          if (focusedIndex >= 0 && onSelect) {\n            onSelect(focusedIndex);\n          }\n          break;\n        \n        case 'Escape':\n          e.preventDefault();\n          setIsNavigating(false);\n          setFocusedIndex(-1);\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [focusedIndex, isNavigating, itemCount, onSelect, focusItem]);\n\n  const startNavigation = useCallback(() => {\n    setIsNavigating(true);\n    if (focusedIndex === -1 && itemCount > 0) {\n      focusItem(0);\n    }\n  }, [focusedIndex, itemCount, focusItem]);\n\n  const stopNavigation = useCallback(() => {\n    setIsNavigating(false);\n    setFocusedIndex(-1);\n  }, []);\n\n  return {\n    focusedIndex,\n    isNavigating,\n    setItemRef,\n    startNavigation,\n    stopNavigation,\n    focusItem\n  };\n};\n\n// 屏幕阅读器公告Hook\nexport const useScreenReader = () => {\n  const [announcement, setAnnouncement] = useState('');\n  const announcementRef = useRef<HTMLDivElement>(null);\n\n  const announce = useCallback((message: string, priority: 'polite' | 'assertive' = 'polite') => {\n    setAnnouncement(message);\n    \n    if (announcementRef.current) {\n      announcementRef.current.setAttribute('aria-live', priority);\n      \n      // 清除后重新设置，确保屏幕阅读器能读取\n      setTimeout(() => {\n        setAnnouncement('');\n        setTimeout(() => {\n          setAnnouncement(message);\n        }, 50);\n      }, 50);\n    }\n  }, []);\n\n  const AnnouncementRegion = useCallback(() => (\n    <div\n      ref={announcementRef}\n      aria-live=\"polite\"\n      aria-atomic=\"true\"\n      className=\"sr-only\"\n      role=\"status\"\n    >\n      {announcement}\n    </div>\n  ), [announcement]);\n\n  return { announce, AnnouncementRegion };\n};\n\n// 焦点管理Hook\nexport const useFocusManagement = () => {\n  const previousFocusRef = useRef<HTMLElement | null>(null);\n  const trapRef = useRef<HTMLElement>(null);\n  const [isTrapActive, setIsTrapActive] = useState(false);\n\n  const saveFocus = useCallback(() => {\n    previousFocusRef.current = document.activeElement as HTMLElement;\n  }, []);\n\n  const restoreFocus = useCallback(() => {\n    if (previousFocusRef.current) {\n      previousFocusRef.current.focus();\n      previousFocusRef.current = null;\n    }\n  }, []);\n\n  const trapFocus = useCallback((element?: HTMLElement) => {\n    const container = element || trapRef.current;\n    if (!container) return;\n\n    setIsTrapActive(true);\n    \n    const focusableElements = container.querySelectorAll(\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    );\n    \n    const firstFocusable = focusableElements[0] as HTMLElement;\n    const lastFocusable = focusableElements[focusableElements.length - 1] as HTMLElement;\n\n    const handleTabKey = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab') return;\n\n      if (e.shiftKey) {\n        if (document.activeElement === firstFocusable) {\n          e.preventDefault();\n          lastFocusable?.focus();\n        }\n      } else {\n        if (document.activeElement === lastFocusable) {\n          e.preventDefault();\n          firstFocusable?.focus();\n        }\n      }\n    };\n\n    document.addEventListener('keydown', handleTabKey);\n    firstFocusable?.focus();\n\n    return () => {\n      document.removeEventListener('keydown', handleTabKey);\n      setIsTrapActive(false);\n    };\n  }, []);\n\n  const releaseFocusTrap = useCallback(() => {\n    setIsTrapActive(false);\n  }, []);\n\n  return {\n    trapRef,\n    isTrapActive,\n    saveFocus,\n    restoreFocus,\n    trapFocus,\n    releaseFocusTrap\n  };\n};\n\n// 颜色对比度检查Hook\nexport const useColorContrast = () => {\n  const [contrastIssues, setContrastIssues] = useState<string[]>([]);\n\n  const checkContrast = useCallback((foreground: string, background: string, level: 'AA' | 'AAA' = 'AA') => {\n    // 简化的对比度计算\n    const hexToRgb = (hex: string) => {\n      const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n      return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n      } : null;\n    };\n\n    const getLuminance = (r: number, g: number, b: number) => {\n      const [rs, gs, bs] = [r, g, b].map(c => {\n        c = c / 255;\n        return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n      });\n      return 0.2126 * rs + 0.7152 * gs + 0.0722 * bs;\n    };\n\n    const fg = hexToRgb(foreground);\n    const bg = hexToRgb(background);\n\n    if (!fg || !bg) return false;\n\n    const fgLum = getLuminance(fg.r, fg.g, fg.b);\n    const bgLum = getLuminance(bg.r, bg.g, bg.b);\n\n    const ratio = (Math.max(fgLum, bgLum) + 0.05) / (Math.min(fgLum, bgLum) + 0.05);\n    const threshold = level === 'AAA' ? 7 : 4.5;\n\n    return ratio >= threshold;\n  }, []);\n\n  return { contrastIssues, checkContrast };\n};\n\n// 动画减少首选项Hook\nexport const useReducedMotion = () => {\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setPrefersReducedMotion(mediaQuery.matches);\n\n    const handleChange = (e: MediaQueryListEvent) => {\n      setPrefersReducedMotion(e.matches);\n    };\n\n    mediaQuery.addListener(handleChange);\n    return () => mediaQuery.removeListener(handleChange);\n  }, []);\n\n  return prefersReducedMotion;\n};\n\n// 高对比度首选项Hook\nexport const useHighContrast = () => {\n  const [prefersHighContrast, setPrefersHighContrast] = useState(false);\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-contrast: high)');\n    setPrefersHighContrast(mediaQuery.matches);\n\n    const handleChange = (e: MediaQueryListEvent) => {\n      setPrefersHighContrast(e.matches);\n    };\n\n    mediaQuery.addListener(handleChange);\n    return () => mediaQuery.removeListener(handleChange);\n  }, []);\n\n  return prefersHighContrast;\n};\n\n// ARIA标签生成Hook\nexport const useARIALabels = () => {\n  const generateId = useCallback((prefix: string = 'aria') => {\n    return `${prefix}-${Math.random().toString(36).substr(2, 9)}`;\n  }, []);\n\n  const generateListLabels = useCallback((itemCount: number, itemType: string = 'item') => {\n    return {\n      listRole: 'list',\n      listAriaLabel: `List of ${itemCount} ${itemType}${itemCount !== 1 ? 's' : ''}`,\n      getItemRole: () => 'listitem',\n      getItemAriaLabel: (index: number, title?: string) => \n        `${itemType} ${index + 1} of ${itemCount}${title ? `: ${title}` : ''}`\n    };\n  }, []);\n\n  const generateButtonLabels = useCallback((action: string, target?: string) => {\n    return {\n      'aria-label': `${action}${target ? ` ${target}` : ''}`,\n      'role': 'button'\n    };\n  }, []);\n\n  return {\n    generateId,\n    generateListLabels,\n    generateButtonLabels\n  };\n};\n\n// 跳过链接Hook\nexport const useSkipLinks = () => {\n  const skipLinksRef = useRef<HTMLDivElement>(null);\n  const [skipLinks, setSkipLinks] = useState<Array<{ href: string; label: string }>>([]);\n\n  const addSkipLink = useCallback((href: string, label: string) => {\n    setSkipLinks(prev => {\n      const exists = prev.some(link => link.href === href);\n      if (exists) return prev;\n      return [...prev, { href, label }];\n    });\n  }, []);\n\n  const removeSkipLink = useCallback((href: string) => {\n    setSkipLinks(prev => prev.filter(link => link.href !== href));\n  }, []);\n\n  const SkipLinks = useCallback(() => (\n    <div ref={skipLinksRef} className=\"sr-only focus-within:not-sr-only\">\n      {skipLinks.map(({ href, label }) => (\n        <a\n          key={href}\n          href={href}\n          className=\"absolute top-0 left-0 z-50 p-2 bg-primary-600 text-white text-sm font-medium focus:relative focus:z-auto\"\n          onFocus={(e) => e.currentTarget.style.position = 'relative'}\n          onBlur={(e) => e.currentTarget.style.position = 'absolute'}\n        >\n          {label}\n        </a>\n      ))}\n    </div>\n  ), [skipLinks]);\n\n  return {\n    addSkipLink,\n    removeSkipLink,\n    SkipLinks\n  };\n};\n\nexport default {\n  useKeyboardNavigation,\n  useScreenReader,\n  useFocusManagement,\n  useColorContrast,\n  useReducedMotion,\n  useHighContrast,\n  useARIALabels,\n  useSkipLinks\n};"