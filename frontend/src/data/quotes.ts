import { Quote } from '../types';

export const quotesData: Quote[] = [
  {
    id: '1',
    text: 'Talk is cheap. Show me the code.',
    author: 'Linus Torvalds',
    source: 'Linux Kernel Mailing List',
    category: 'programming',
    tags: ['linux', 'code', 'action'],
    difficulty: 'beginner',
    createdAt: '2023-01-01T00:00:00Z',
    chineseExplanation: '空谈无用，代码为王。林纳斯告诉我们，与其说一大堆理论，不如写出能工作的代码。这句话体现了Linux创始人务实的态度：行动胜过语言，实践是检验真理的唯一标准。'
  },
  {
    id: '2',
    text: 'The best way to get a project done faster is to start sooner.',
    author: 'Jim Highsmith',
    source: 'Agile Software Development',
    category: 'management',
    tags: ['agile', 'project', 'time'],
    difficulty: 'beginner',
    createdAt: '2023-01-02T00:00:00Z',
    chineseExplanation: '想要更快完成项目，最好的方法就是尽早开始。这体现了敏捷开发的核心思想：时间是最宝贵的资源，拖延只会让问题变得更复杂。早开始意味着有更多时间应对意外情况，也能更早发现和解决问题。'
  },
  {
    id: '3',
    text: 'Premature optimization is the root of all evil.',
    author: 'Donald Knuth',
    source: 'Computer Programming as an Art',
    category: 'programming',
    tags: ['optimization', 'performance', 'wisdom'],
    difficulty: 'intermediate',
    createdAt: '2023-01-03T00:00:00Z',
    chineseExplanation: '过早优化是万恶之源。高德纳提醒我们，在没有明确性能瓶颈的情况下就开始优化，往往会让代码变得复杂难懂，反而降低开发效率。正确的做法是先让程序正确运行，再根据实际测量结果进行针对性优化。'
  },
  {
    id: '4',
    text: 'The most important thing in communication is hearing what isn\'t said.',
    author: 'Peter Drucker',
    source: 'Management Challenges',
    category: 'management',
    tags: ['communication', 'leadership', 'insight'],
    difficulty: 'advanced',
    createdAt: '2023-01-04T00:00:00Z',
    chineseExplanation: '沟通中最重要的是听出那些没有说出口的话。德鲁克强调了洞察力在管理中的重要性。真正的沟通不仅要听懂表面的话，更要理解背后的意图、担忧和需求。这需要敏锐的观察力和同理心。'
  },
  {
    id: '5',
    text: 'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',
    author: 'Martin Fowler',
    source: 'Refactoring',
    category: 'programming',
    tags: ['clean-code', 'readability', 'maintainability'],
    difficulty: 'intermediate',
    createdAt: '2023-01-05T00:00:00Z',
    chineseExplanation: '任何傻瓜都能写出计算机能理解的代码，但优秀的程序员写出人类能理解的代码。福勒强调了代码可读性的重要性。代码不仅要能运行，更要易于理解、维护和修改。毕竟，代码被阅读的次数远远超过被编写的次数。'
  },
  {
    id: '6',
    text: 'Simplicity is the ultimate sophistication.',
    author: 'Leonardo da Vinci',
    source: 'Renaissance Notebooks',
    category: 'design',
    tags: ['simplicity', 'elegance', 'philosophy'],
    difficulty: 'beginner',
    createdAt: '2023-01-06T00:00:00Z',
    chineseExplanation: '简单是最高级的复杂。达芬奇这句话揭示了设计的真谛：真正的优雅来自于简单，而不是复杂。在软件开发中，简单的解决方案往往更稳定、更易维护，也更容易被用户理解和接受。'
  },
  {
    id: '7',
    text: 'There are only two hard things in Computer Science: cache invalidation and naming things.',
    author: 'Phil Karlton',
    source: 'Netscape Communications',
    category: 'programming',
    tags: ['naming', 'cache', 'humor'],
    difficulty: 'intermediate',
    createdAt: '2023-01-07T00:00:00Z',
    chineseExplanation: '计算机科学中只有两件难事：缓存失效和命名。这是一句幽默但深刻的话。缓存失效涉及分布式系统的复杂性，而命名则看似简单却极其重要——好的命名能让代码自文档化，糟糕的命名则会让程序难以理解。'
  },
  {
    id: '8',
    text: 'Architecture is about the important stuff. Whatever that is.',
    author: 'Ralph Johnson',
    source: 'Software Architecture Patterns',
    category: 'architecture',
    tags: ['architecture', 'importance', 'focus'],
    difficulty: 'advanced',
    createdAt: '2023-01-08T00:00:00Z',
    chineseExplanation: '架构关乎重要的事情，不管那是什么。约翰逊用这种似乎矛盾的表达指出，架构的本质是识别和优先处理关键问题。不同的项目有不同的“重要事情”，架构师的职责就是识别它们并作出正确的设计决策。'
  },
  {
    id: '9',
    text: 'The only way to go fast is to go well.',
    author: 'Robert C. Martin',
    source: 'Clean Code',
    category: 'programming',
    tags: ['quality', 'speed', 'craftsmanship'],
    difficulty: 'intermediate',
    createdAt: '2023-01-09T00:00:00Z',
    chineseExplanation: '要快，先要好。鲍伯大叔的这句话挑战了传统观念：许多人认为质量和速度是矛盾的，但实际上，只有高质量的代码才能带来持续的开发速度。糟糕的代码会让你越来越慢，而干净的代码则让修改和扩展变得轻松。'
  },
  {
    id: '10',
    text: 'Programs must be written for people to read, and only incidentally for machines to execute.',
    author: 'Harold Abelson',
    source: 'Structure and Interpretation of Computer Programs',
    category: 'programming',
    tags: ['readability', 'humans', 'fundamentals'],
    difficulty: 'beginner',
    createdAt: '2023-01-10T00:00:00Z',
    chineseExplanation: '程序主要是给人看的，只是顺带给机器执行。这句出自SICP的名言强调了代码可读性的根本重要性。在现代软件开发中，团队协作和代码维护是常态，所以写出人类友好的代码比仅仅让机器能执行更重要。'
  },
  {
    id: '11',
    text: 'The best way to predict the future is to invent it.',
    author: 'Alan Kay',
    source: 'Xerox PARC',
    category: 'philosophy',
    tags: ['innovation', 'future', 'creation'],
    difficulty: 'intermediate',
    createdAt: '2023-01-11T00:00:00Z',
    chineseExplanation: '预测未来的最好方法就是去创造它。凯这句话体现了科技先驱者的主动精神：与其被动等待未来的发生，不如主动去塑造它。在技术领域，这意味着要有前瞻性的视野和创新的勇气，通过技术创新来引领变革。'
  },
  {
    id: '12',
    text: 'Debugging is twice as hard as writing the code in the first place.',
    author: 'Brian Kernighan',
    source: 'The Elements of Programming Style',
    category: 'programming',
    tags: ['debugging', 'complexity', 'wisdom'],
    difficulty: 'intermediate',
    createdAt: '2023-01-12T00:00:00Z',
    chineseExplanation: '调试的难度是写代码的两倍。科尼根的这个观察揭示了一个重要道理：如果你在写代码时已经用尽了全部智力，那么你就没有足够的脑力来调试它。这提醒我们要写简单、清晰的代码，留下足够的智力空间来处理问题。'
  },
  {
    id: '13',
    text: 'Design is not just what it looks like and feels like. Design is how it works.',
    author: 'Steve Jobs',
    source: 'Apple Design Philosophy',
    category: 'design',
    tags: ['design', 'function', 'user-experience'],
    difficulty: 'beginner',
    createdAt: '2023-01-13T00:00:00Z',
    chineseExplanation: '设计不仅仅是外观和感受，设计是如何工作。乔布斯这句话阐述了设计的本质：真正的设计不只是表面功夫，而是深入理解用户需求和使用场景，从而创造出既美观又实用的产品。在软件开发中，这意味着要关注用户体验和功能实现。'
  },
  {
    id: '14',
    text: 'Walking on water and developing software from a specification are easy if both are frozen.',
    author: 'Edward V. Berard',
    source: 'Software Engineering Essays',
    category: 'management',
    tags: ['requirements', 'change', 'humor'],
    difficulty: 'intermediate',
    createdAt: '2023-01-14T00:00:00Z',
    chineseExplanation: '在水上行走和按照规格开发软件都很容易——如果它们都冻结了的话。这是一个幽默的比喻，说明了软件开发中需求变更的必然性。在现实中，需求总是在变化，软件开发必须适应这种变化，而不能期望一成不变的规格。'
  },
  {
    id: '15',
    text: 'The computing scientist\'s main challenge is not to get confused by the complexities of his own making.',
    author: 'Edsger W. Dijkstra',
    source: 'Selected Writings on Computing',
    category: 'philosophy',
    tags: ['complexity', 'simplicity', 'thinking'],
    difficulty: 'advanced',
    createdAt: '2023-01-15T00:00:00Z',
    chineseExplanation: '计算机科学家的主要挑战是不要被自己创造的复杂性所迷惑。迪科斯特拉的这句话是对程序员的深刺提醒：我们在软件开发中往往会创造出不必要的复杂性，然后又被这些复杂性所困扰。保持清晰的思维和简单的设计是关键。'
  },
  {
    id: '16',
    text: 'Good software, like wine, takes time.',
    author: 'Joel Spolsky',
    source: 'Joel on Software',
    category: 'philosophy',
    tags: ['quality', 'time', 'craftsmanship'],
    difficulty: 'beginner',
    createdAt: '2023-01-16T00:00:00Z',
    chineseExplanation: '好软件像好酒一样，需要时间。斯普尔斯基用酒的比喻说明了软件质量的培养过程。优秀的软件需要精心打磨、反复迭代和用户反馈的沉淀。急于求成往往会导致质量问题，而渐进式的改进则能重造经典。'
  },
  {
    id: '17',
    text: 'Make it work, make it right, make it fast.',
    author: 'Kent Beck',
    source: 'Extreme Programming',
    category: 'programming',
    tags: ['methodology', 'iteration', 'priorities'],
    difficulty: 'intermediate',
    createdAt: '2023-01-17T00:00:00Z',
    chineseExplanation: '先让它运行，再让它正确，最后让它快速。贝克的这个三步法是软件开发的经典指导原则。首先实现功能，然后重构代码使其可维护，最后根据实际需要进行性能优化。这种渐进式方法避免了过早优化的陷阱。'
  },
  {
    id: '18',
    text: 'Perfection is achieved not when there is nothing more to add, but when there is nothing left to take away.',
    author: 'Antoine de Saint-Exupéry',
    source: 'Airman\'s Odyssey',
    category: 'design',
    tags: ['perfection', 'minimalism', 'elegance'],
    difficulty: 'intermediate',
    createdAt: '2023-01-18T00:00:00Z',
    chineseExplanation: '完美不是无法再增加什么，而是无法再减少什么。圣埃克苏佩里的这句话阐述了极简主义的精髓。在软件设计中，真正的优雅来自于精简——删除一切不必要的复杂性，保留最本质的功能。这样的设计既美观又易用。'
  },
  {
    id: '19',
    text: 'The key to performance is elegance, not battalions of special cases.',
    author: 'Jon Bentley',
    source: 'Programming Pearls',
    category: 'programming',
    tags: ['performance', 'elegance', 'simplicity'],
    difficulty: 'advanced',
    createdAt: '2023-01-19T00:00:00Z',
    chineseExplanation: '性能的关键在于优雅，而不是堆积大量特殊情况。本特利的这句话揭示了高性能软件的真谛：优雅的算法和数据结构往往比堆积各种优化技巧更有效。简洁的解决方案不仅性能更好，也更容易理解和维护。'
  },
  {
    id: '20',
    text: 'Before software can be reusable it first has to be usable.',
    author: 'Ralph Johnson',
    source: 'Design Patterns',
    category: 'architecture',
    tags: ['reusability', 'usability', 'design'],
    difficulty: 'intermediate',
    createdAt: '2023-01-20T00:00:00Z',
    chineseExplanation: '软件在可重用之前，必须先是可用的。约翰逊的这句话点出了软件设计的优先级问题。很多开发者过分追求代码的通用性和重用性，却忽略了它的可用性。只有在特定场景下能好好工作的软件，才值得考虑抽象和重用。'
  },
  // 新增的30条箴言
  {
    id: '21',
    text: 'Code is read much more often than it is written.',
    author: 'Guido van Rossum',
    source: 'Python Language Design',
    category: 'programming',
    tags: ['readability', 'python', 'maintenance'],
    difficulty: 'beginner',
    createdAt: '2023-01-21T00:00:00Z',
    chineseExplanation: '代码被阅读的次数远远超过被编写的次数。Python之父van Rossum强调了代码可读性的极端重要性。在软件的生命周期中，代码会被无数次阅读、理解、修改和调试，但只会被写一次。因此，投入时间让代码清晰易懂是最划算的投资。'
  },
  {
    id: '22',
    text: 'The best performance improvement is the transition from the nonworking state to the working state.',
    author: 'John Ousterhout',
    source: 'A Philosophy of Software Design',
    category: 'programming',
    tags: ['performance', 'functionality', 'priorities'],
    difficulty: 'intermediate',
    createdAt: '2023-01-22T00:00:00Z',
    chineseExplanation: '最好的性能提升是从不工作状态转变为工作状态。Ousterhout教授幽默地指出了功能正确性的首要地位。一个不能工作的程序，无论多么高效都是无用的。先让程序正确运行，再考虑优化性能，这是明智的开发策略。'
  },
  {
    id: '23',
    text: 'If you think good architecture is expensive, try bad architecture.',
    author: 'Brian Foote',
    source: 'Big Ball of Mud',
    category: 'architecture',
    tags: ['architecture', 'cost', 'technical-debt'],
    difficulty: 'advanced',
    createdAt: '2023-01-23T00:00:00Z',
    chineseExplanation: '如果你觉得好架构很昂贵，那就试试坏架构。Foote通过对比揭示了架构投资的重要性。短期内，良好的架构设计可能需要更多时间和资源，但糟糕的架构会在长期带来巨大的维护成本、技术债务和开发效率下降。'
  },
  {
    id: '24',
    text: 'Every great developer you know got there by solving problems they were unqualified to solve until they actually did it.',
    author: 'Patrick McKenzie',
    source: 'Software Engineering Career Advice',
    category: 'philosophy',
    tags: ['growth', 'learning', 'challenge'],
    difficulty: 'beginner',
    createdAt: '2023-01-24T00:00:00Z',
    chineseExplanation: '每个伟大的开发者都是通过解决那些他们本来不够格解决的问题而成长起来的。McKenzie这句话鼓励开发者勇于接受挑战。成长来自于走出舒适区，承担看似超出能力范围的任务。正是在解决这些"不可能"的问题过程中，我们获得了真正的成长。'
  },
  {
    id: '25',
    text: 'Software is a gas; it expands to fill its container.',
    author: 'Nathan Myhrvold',
    source: 'Microsoft Technology Strategy',
    category: 'management',
    tags: ['complexity', 'scope', 'resources'],
    difficulty: 'intermediate',
    createdAt: '2023-01-25T00:00:00Z',
    chineseExplanation: '软件就像气体，会膨胀填满它的容器。Myhrvold的这个比喻描述了软件项目的一个普遍现象：无论给软件项目多少时间和资源，它都会用完所有可用的资源。这提醒我们需要合理控制项目范围，设定明确的边界和约束条件。'
  },
  {
    id: '26',
    text: 'The bearing of a child takes nine months, no matter how many women are assigned.',
    author: 'Fred Brooks',
    source: 'The Mythical Man-Month',
    category: 'management',
    tags: ['scheduling', 'team-size', 'productivity'],
    difficulty: 'intermediate',
    createdAt: '2023-01-26T00:00:00Z',
    chineseExplanation: '生孩子需要九个月，无论指派多少女人都一样。布鲁克斯的这个经典比喻说明了为什么简单地增加人手不能加快软件开发进度。有些任务是顺序性的，无法并行化。更多的人员可能带来更多的沟通成本和协调复杂性，反而降低效率。'
  },
  {
    id: '27',
    text: 'There are two types of languages: the ones people complain about and the ones nobody uses.',
    author: 'Bjarne Stroustrup',
    source: 'C++ Language Design',
    category: 'programming',
    tags: ['languages', 'criticism', 'adoption'],
    difficulty: 'intermediate',
    createdAt: '2023-01-27T00:00:00Z',
    chineseExplanation: '编程语言分两种：被人抱怨的和没人用的。C++之父Stroustrup的这句话揭示了一个深刻道理：任何被广泛使用的技术都会面临批评，因为人们只会认真对待那些他们实际使用的东西。完美的工具往往存在于理论中，而实用的工具总是充满妥协。'
  },
  {
    id: '28',
    text: 'The best code is no code at all.',
    author: 'Jeff Atwood',
    source: 'Coding Horror Blog',
    category: 'programming',
    tags: ['simplicity', 'minimal', 'maintenance'],
    difficulty: 'intermediate',
    createdAt: '2023-01-28T00:00:00Z',
    chineseExplanation: '最好的代码就是没有代码。Atwood这句话强调了极简主义在编程中的价值。每一行代码都是一个潜在的bug源，都需要维护和测试。在解决问题时，如果能用更少的代码或者完全避免编码（比如使用现有工具），往往是更好的选择。'
  },
  {
    id: '29',
    text: 'Complexity kills. It sucks the life out of developers.',
    author: 'Ray Ozzie',
    source: 'Microsoft Architecture Principles',
    category: 'architecture',
    tags: ['complexity', 'developer-experience', 'productivity'],
    difficulty: 'intermediate',
    createdAt: '2023-01-29T00:00:00Z',
    chineseExplanation: '复杂性致命，它榨干了开发者的生命力。Ozzie生动地描述了复杂性对开发团队的破坏性影响。过度复杂的系统不仅难以理解和维护，还会消耗开发者的精力和热情，降低团队的创造力和生产力。简化架构是保持团队活力的关键。'
  },
  {
    id: '30',
    text: 'The computer was born to solve problems that did not exist before.',
    author: 'Bill Gates',
    source: 'Technology and Innovation',
    category: 'philosophy',
    tags: ['technology', 'problems', 'innovation'],
    difficulty: 'beginner',
    createdAt: '2023-01-30T00:00:00Z',
    chineseExplanation: '计算机的诞生是为了解决以前不存在的问题。盖茨这句话带有讽刺意味，指出了技术发展的悖论：新技术在解决问题的同时，也创造了新的问题。这提醒我们在技术创新时要平衡考虑，确保解决方案的价值大于其带来的新复杂性。'
  },
  {
    id: '31',
    text: 'First, solve the problem. Then, write the code.',
    author: 'John Johnson',
    source: 'Software Engineering Principles',
    category: 'programming',
    tags: ['problem-solving', 'planning', 'methodology'],
    difficulty: 'beginner',
    createdAt: '2023-01-31T00:00:00Z',
    chineseExplanation: '先解决问题，再写代码。Johnson的这句话强调了问题分析的重要性。许多开发者急于开始编码，但没有充分理解要解决的问题。花时间深入理解问题域、明确需求、设计解决方案，往往能让后续的编码工作事半功倍。'
  },
  {
    id: '32',
    text: 'Code never lies, comments sometimes do.',
    author: 'Ron Jeffries',
    source: 'Extreme Programming',
    category: 'programming',
    tags: ['comments', 'documentation', 'truth'],
    difficulty: 'intermediate',
    createdAt: '2023-02-01T00:00:00Z',
    chineseExplanation: '代码从不撒谎，注释有时会。Jeffries提醒我们代码是最可靠的文档。随着时间推移，注释可能会过时或错误，但代码总是反映当前的实际行为。这并不意味着不需要注释，而是说注释需要与代码保持同步，代码本身应该足够清晰。'
  },
  {
    id: '33',
    text: 'Programming is not about typing, it\'s about thinking.',
    author: 'Rich Hickey',
    source: 'Clojure Design Philosophy',
    category: 'philosophy',
    tags: ['thinking', 'problem-solving', 'design'],
    difficulty: 'intermediate',
    createdAt: '2023-02-02T00:00:00Z',
    chineseExplanation: '编程不是关于打字，而是关于思考。Clojure创始人Hickey强调了编程的本质是思维活动。真正有价值的不是能快速打出代码，而是能深入思考问题、设计优雅的解决方案。编程的核心技能是抽象思维、问题分解和逻辑推理。'
  },
  {
    id: '34',
    text: 'The most dangerous phrase in the language is: We\'ve always done it this way.',
    author: 'Grace Hopper',
    source: 'Computer Programming Principles',
    category: 'philosophy',
    tags: ['innovation', 'tradition', 'change'],
    difficulty: 'beginner',
    createdAt: '2023-02-03T00:00:00Z',
    chineseExplanation: '语言中最危险的短语是："我们一直都是这样做的"。计算机先驱Hopper警告我们要警惕固化思维。在快速发展的技术领域，墨守成规是致命的。我们应该持续质疑现有方法，探索更好的解决方案，拥抱变化和创新。'
  },
  {
    id: '35',
    text: 'If debugging is the process of removing software bugs, then programming must be the process of putting them in.',
    author: 'Edsger W. Dijkstra',
    source: 'Programming Methodology',
    category: 'programming',
    tags: ['debugging', 'bugs', 'humor'],
    difficulty: 'beginner',
    createdAt: '2023-02-04T00:00:00Z',
    chineseExplanation: '如果调试是移除软件bug的过程，那么编程一定是把bug放进去的过程。Dijkstra的这个幽默观察反映了一个现实：编程不可避免地会引入错误。这提醒我们要用谦逊的态度对待编程，承认错误的必然性，并建立有效的测试和质量保证流程。'
  },
  {
    id: '36',
    text: 'Measuring programming progress by lines of code is like measuring aircraft building progress by weight.',
    author: 'Bill Gates',
    source: 'Software Development Metrics',
    category: 'management',
    tags: ['metrics', 'productivity', 'measurement'],
    difficulty: 'intermediate',
    createdAt: '2023-02-05T00:00:00Z',
    chineseExplanation: '用代码行数衡量编程进度，就像用重量衡量飞机制造进度一样。盖茨的这个比喻批评了错误的绩效指标。代码的价值在于功能和质量，而不是数量。好的代码往往更简洁，用更少的代码解决更多问题。我们需要更智能的指标来评估开发效果。'
  },
  {
    id: '37',
    text: 'The trouble with programmers is that you can never tell what a programmer is doing until it\'s too late.',
    author: 'Seymour Cray',
    source: 'Supercomputing Insights',
    category: 'management',
    tags: ['visibility', 'communication', 'project-management'],
    difficulty: 'intermediate',
    createdAt: '2023-02-06T00:00:00Z',
    chineseExplanation: '程序员的麻烦在于，你永远不知道程序员在做什么，直到为时已晚。超级计算机之父Cray指出了软件开发的可见性问题。编程工作很难从外部观察和评估，这给项目管理带来挑战。需要建立有效的沟通机制和进度跟踪方法。'
  },
  {
    id: '38',
    text: 'Any sufficiently advanced technology is indistinguishable from magic.',
    author: 'Arthur C. Clarke',
    source: 'Profiles of the Future',
    category: 'philosophy',
    tags: ['technology', 'complexity', 'understanding'],
    difficulty: 'beginner',
    createdAt: '2023-02-07T00:00:00Z',
    chineseExplanation: '任何足够先进的技术都与魔法无异。科幻作家Clarke的这句名言（克拉克第三定律）在软件开发中同样适用。复杂的系统对用户来说可能如同魔法，但对开发者而言，重要的是保持技术的可理解性和可维护性，避免创造"黑魔法"。'
  },
  {
    id: '39',
    text: 'Software is like entropy: It is difficult to grasp, weighs nothing, and obeys the second law of thermodynamics.',
    author: 'Norman Augustine',
    source: 'Augustine\'s Laws',
    category: 'philosophy',
    tags: ['entropy', 'complexity', 'maintenance'],
    difficulty: 'advanced',
    createdAt: '2023-02-08T00:00:00Z',
    chineseExplanation: '软件就像熵：难以把握，没有重量，并且遵循热力学第二定律。Augustine用物理学概念来描述软件的特性。软件系统倾向于随时间变得更加混乱和复杂，需要持续的努力来维持秩序。这提醒我们要主动管理软件的复杂性。'
  },
  {
    id: '40',
    text: 'Testing shows the presence, not the absence of bugs.',
    author: 'Edsger W. Dijkstra',
    source: 'Software Engineering Principles',
    category: 'programming',
    tags: ['testing', 'quality', 'verification'],
    difficulty: 'intermediate',
    createdAt: '2023-02-09T00:00:00Z',
    chineseExplanation: '测试显示bug的存在，而不是不存在。Dijkstra这句话揭示了测试的本质限制。测试可以发现问题，但不能证明软件完全正确。这提醒我们要理性看待测试的作用，同时采用多种质量保证手段，如代码审查、静态分析等。'
  },
  {
    id: '41',
    text: 'The best way to get accurate information on Usenet is to post something wrong and wait for corrections.',
    author: 'Matthew Austern',
    source: 'Cunningham\'s Law',
    category: 'management',
    tags: ['knowledge', 'community', 'learning'],
    difficulty: 'beginner',
    createdAt: '2023-02-10T00:00:00Z',
    chineseExplanation: '在网上获取准确信息的最佳方式是发布错误信息，然后等待纠正。这被称为坎宁安定律。在软件开发中，这反映了社区协作的力量：有时主动暴露问题比被动寻求帮助更有效。当然，这需要在合适的环境中谨慎使用。'
  },
  {
    id: '42',
    text: 'Documentation is like sex: when it\'s good, it\'s very good, and when it\'s bad, it\'s better than nothing.',
    author: 'Dick Brandon',
    source: 'Software Documentation',
    category: 'programming',
    tags: ['documentation', 'quality', 'maintenance'],
    difficulty: 'intermediate',
    createdAt: '2023-02-11T00:00:00Z',
    chineseExplanation: '文档就像性：好的时候非常好，坏的时候也比没有强。Brandon用这个大胆的比喻强调了文档的重要性。虽然糟糕的文档可能令人沮丧，但它仍然比完全没有文档要好。这提醒我们即使不完美，也要努力提供一些文档。'
  },
  {
    id: '43',
    text: 'In software, the most beautiful code, the most beautiful functions, and the most beautiful programs are sometimes not there at all.',
    author: 'Jon Bentley',
    source: 'Programming Pearls',
    category: 'programming',
    tags: ['elegance', 'simplicity', 'design'],
    difficulty: 'advanced',
    createdAt: '2023-02-12T00:00:00Z',
    chineseExplanation: '在软件中，最美的代码、最美的函数和最美的程序有时根本不存在。Bentley指出了编程中的禅意：有时最好的解决方案是不解决。通过重新思考问题，我们可能发现某个功能根本不需要，某段代码可以删除。删除代码往往比添加代码更有价值。'
  },
  {
    id: '44',
    text: 'The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time.',
    author: 'Tom Cargill',
    source: 'Software Engineering Estimation',
    category: 'management',
    tags: ['estimation', 'planning', 'completion'],
    difficulty: 'intermediate',
    createdAt: '2023-02-13T00:00:00Z',
    chineseExplanation: '前90%的代码占用开发时间的前90%，剩下的10%代码占用另外90%的开发时间。Cargill的这个"90-90法则"幽默地指出了软件项目估算的困难。项目的最后阶段往往比预期更困难，包括bug修复、性能优化、集成测试等都比想象中耗时。'
  },
  {
    id: '45',
    text: 'There are only 10 types of people in the world: those who understand binary and those who don\'t.',
    author: 'Anonymous',
    source: 'Programming Humor',
    category: 'programming',
    tags: ['binary', 'humor', 'geek'],
    difficulty: 'beginner',
    createdAt: '2023-02-14T00:00:00Z',
    chineseExplanation: '世界上只有10种人：懂二进制的和不懂的。这是程序员圈子里的经典玩笑，"10"在二进制中表示2。这个双关语体现了程序员的幽默感，也反映了编程思维的独特性：我们习惯用不同的数字系统和抽象层次来思考问题。'
  },
  {
    id: '46',
    text: 'Programming is the art of telling another human being what one wants the computer to do.',
    author: 'Donald Knuth',
    source: 'Literate Programming',
    category: 'programming',
    tags: ['communication', 'literate-programming', 'clarity'],
    difficulty: 'intermediate',
    createdAt: '2023-02-15T00:00:00Z',
    chineseExplanation: '编程是告诉另一个人你想让计算机做什么的艺术。高德纳在文学编程理念中强调，编程的主要受众是人，而不是机器。好的程序应该像散文一样清晰地表达意图，让读者能够理解程序的逻辑和目的。'
  },
  {
    id: '47',
    text: 'Premature abstraction is the root of all evil.',
    author: 'Unknown',
    source: 'Programming Wisdom',
    category: 'programming',
    tags: ['abstraction', 'premature', 'design'],
    difficulty: 'advanced',
    createdAt: '2023-02-16T00:00:00Z',
    chineseExplanation: '过早抽象是万恶之源。这是对Knuth"过早优化"名言的变体。许多开发者在没有充分理解问题域的情况下就创建复杂的抽象层，结果制造了不必要的复杂性。正确的做法是等到模式变得清晰后再进行抽象。'
  },
  {
    id: '48',
    text: 'It\'s not a bug, it\'s a feature.',
    author: 'Unknown',
    source: 'Software Development Culture',
    category: 'programming',
    tags: ['bugs', 'features', 'humor'],
    difficulty: 'beginner',
    createdAt: '2023-02-17T00:00:00Z',
    chineseExplanation: '"这不是bug，这是特性。"这句程序员的经典自嘲反映了软件开发的现实：有时意外的行为反而变成了有用的功能。虽然这常常是为错误开脱的借口，但也提醒我们要开放地看待软件的演化过程。'
  },
  {
    id: '49',
    text: 'A good programmer is someone who always looks both ways before crossing a one-way street.',
    author: 'Doug Linder',
    source: 'Programming Methodology',
    category: 'programming',
    tags: ['caution', 'defensive-programming', 'safety'],
    difficulty: 'intermediate',
    createdAt: '2023-02-18T00:00:00Z',
    chineseExplanation: '好的程序员在过单行道时也会左右看看。Linder用这个比喻描述了优秀程序员的谨慎态度。即使在看似安全的情况下，好的程序员也会考虑各种异常情况，编写防御性代码，验证假设，不轻易相信"不可能发生"的事情。'
  },
  {
    id: '50',
    text: 'The question of whether computers can think is like the question of whether submarines can swim.',
    author: 'Edsger W. Dijkstra',
    source: 'Computer Science Philosophy',
    category: 'philosophy',
    tags: ['ai', 'thinking', 'analogy'],
    difficulty: 'advanced',
    createdAt: '2023-02-19T00:00:00Z',
    chineseExplanation: '计算机能否思考的问题，就像潜艇能否游泳的问题一样。Dijkstra的这个类比揭示了一个深刻的哲学问题：我们对"思考"的定义决定了答案。就像潜艇移动的方式与鱼不同但同样有效，计算机的"思考"方式可能与人类不同，但同样有意义。'
  },
  // 新增的50条箴言 (51-100)
  {
    id: '51',
    text: 'Good code is its own best documentation.',
    author: 'Steve McConnell',
    source: 'Code Complete',
    category: 'programming',
    tags: ['documentation', 'clean-code', 'readability'],
    difficulty: 'intermediate',
    createdAt: '2023-02-20T00:00:00Z',
    chineseExplanation: '好代码就是最好的文档。McConnell强调了自文档化代码的重要性。当代码结构清晰、命名得当、逻辑简洁时，它本身就能清楚地表达意图，减少对额外文档的依赖。这不意味着不需要文档，而是说代码应该尽可能自解释。'
  },
  {
    id: '52',
    text: '640K ought to be enough for anybody.',
    author: 'Bill Gates (disputed)',
    source: 'Attributed Quote',
    category: 'philosophy',
    tags: ['memory', 'prediction', 'limits'],
    difficulty: 'beginner',
    createdAt: '2023-02-21T00:00:00Z',
    chineseExplanation: '640K对任何人来说都应该足够了。这句被归属于盖茨的话（虽然他否认说过）成为了技术预测错误的经典案例。它提醒我们在技术发展面前保持谦逊，避免对未来的需求做出过于绝对的判断。今天的不可能可能就是明天的基本需求。'
  },
  {
    id: '53',
    text: 'The art of programming is the skill of controlling complexity.',
    author: 'Marijn Haverbeke',
    source: 'Eloquent JavaScript',
    category: 'programming',
    tags: ['complexity', 'art', 'control'],
    difficulty: 'intermediate',
    createdAt: '2023-02-22T00:00:00Z',
    chineseExplanation: '编程的艺术就是控制复杂性的技能。Haverbeke将编程定义为一种管理复杂性的艺术。随着软件系统的增长，复杂性是不可避免的，但优秀的程序员能够通过合理的抽象、模块化和设计模式来驾驭这种复杂性，让系统保持可理解和可维护。'
  },
  {
    id: '54',
    text: 'Your code is a liability, not an asset.',
    author: 'Eric Ries',
    source: 'The Lean Startup',
    category: 'management',
    tags: ['mindset', 'value', 'maintenance'],
    difficulty: 'advanced',
    createdAt: '2023-02-23T00:00:00Z',
    chineseExplanation: '你的代码是负债，不是资产。Ries的这个观点挑战了传统认知。代码本身需要维护、测试和更新，这些都是成本。真正的资产是代码所创造的价值和解决的问题。这提醒我们要关注价值创造，而不是单纯的代码数量。'
  },
  {
    id: '55',
    text: 'The most secure code in the world is code which is not there.',
    author: 'Colin Percival',
    source: 'Security Engineering',
    category: 'security',
    tags: ['security', 'minimalism', 'attack-surface'],
    difficulty: 'advanced',
    createdAt: '2023-02-24T00:00:00Z',
    chineseExplanation: '世界上最安全的代码就是不存在的代码。Percival从安全角度强调了极简主义的价值。每一行代码都可能成为攻击面，不存在的代码就不会有安全漏洞。这原则鼓励我们删除不必要的功能，保持系统简洁，从而减少安全风险。'
  },
  {
    id: '56',
    text: 'Hofstadter\'s Law: It always takes longer than you expect, even when you take into account Hofstadter\'s Law.',
    author: 'Douglas Hofstadter',
    source: 'Gödel, Escher, Bach',
    category: 'management',
    tags: ['estimation', 'planning', 'recursion'],
    difficulty: 'intermediate',
    createdAt: '2023-02-25T00:00:00Z',
    chineseExplanation: '霍夫施塔特定律：即使你考虑到了霍夫施塔特定律，事情也总是比你预期的要花更长时间。这是一个自指的定律，幽默地指出了项目估算的困难性。即使我们知道项目会延期，实际延期的程度往往仍超出预期。'
  },
  {
    id: '57',
    text: 'Deleted code is debugged code.',
    author: 'Jeff Sickel',
    source: 'Software Engineering Wisdom',
    category: 'programming',
    tags: ['deletion', 'debugging', 'simplicity'],
    difficulty: 'intermediate',
    createdAt: '2023-02-26T00:00:00Z',
    chineseExplanation: '删除的代码就是调试过的代码。Sickel这句话强调了删除代码的价值。不存在的代码不会有bug，也不需要维护。在重构过程中，删除不必要的代码往往比添加新代码更有价值，能够降低系统复杂度和维护成本。'
  },
  {
    id: '58',
    text: 'The function of good software is to make the complex appear to be simple.',
    author: 'Grady Booch',
    source: 'Object-Oriented Analysis and Design',
    category: 'design',
    tags: ['simplicity', 'user-experience', 'abstraction'],
    difficulty: 'intermediate',
    createdAt: '2023-02-27T00:00:00Z',
    chineseExplanation: '好软件的功能是让复杂的东西看起来简单。Booch阐述了优秀软件设计的本质：通过合理的抽象和接口设计，将复杂的内部实现隐藏起来，为用户提供简洁直观的体验。这是设计师最重要的技能之一。'
  },
  {
    id: '59',
    text: 'Two hard problems in computer science: cache invalidation, naming things, and off-by-one errors.',
    author: 'Leon Bambrick',
    source: 'Programming Humor Extension',
    category: 'programming',
    tags: ['cache', 'naming', 'bugs', 'humor'],
    difficulty: 'intermediate',
    createdAt: '2023-02-28T00:00:00Z',
    chineseExplanation: '计算机科学中的两个难题：缓存失效、命名和差一错误。这是对Phil Karlton名言的幽默扩展，故意包含了一个"差一错误"（说是两个问题却列了三个）。它反映了程序员日常面临的实际挑战：缓存管理、恰当命名和边界条件处理。'
  },
  {
    id: '60',
    text: 'Simplicity is prerequisite for reliability.',
    author: 'Edsger W. Dijkstra',
    source: 'Software Engineering Principles',
    category: 'design',
    tags: ['simplicity', 'reliability', 'quality'],
    difficulty: 'intermediate',
    createdAt: '2023-03-01T00:00:00Z',
    chineseExplanation: '简单是可靠性的前提。Dijkstra指出了简单性与可靠性之间的因果关系。复杂的系统更容易出错，更难测试和维护。只有简单的设计才能让我们充分理解系统行为，从而构建真正可靠的软件。'
  },
  {
    id: '61',
    text: 'Real programmers can write assembly code in any language.',
    author: 'Larry Wall',
    source: 'Perl Programming Philosophy',
    category: 'programming',
    tags: ['assembly', 'languages', 'skill'],
    difficulty: 'intermediate',
    createdAt: '2023-03-02T00:00:00Z',
    chineseExplanation: '真正的程序员可以用任何语言写汇编代码。Perl之父Wall的这句幽默观察指出，程序员往往会在高级语言中使用低级的编程思维。这既是一种批评（没有利用语言特性），也是一种赞美（展现了深层的技术理解）。'
  },
  {
    id: '62',
    text: 'Programming is learned by writing programs.',
    author: 'Brian Kernighan',
    source: 'The C Programming Language',
    category: 'philosophy',
    tags: ['learning', 'practice', 'experience'],
    difficulty: 'beginner',
    createdAt: '2023-03-03T00:00:00Z',
    chineseExplanation: '编程是通过写程序来学习的。Kernighan强调了实践在编程学习中的核心地位。仅仅阅读书籍或听课是不够的，只有通过实际编写、调试和运行程序，才能真正掌握编程技能。这是学习编程的黄金法则。'
  },
  {
    id: '63',
    text: 'Data dominates. If you\'ve chosen the right data structures and organized things well, the algorithms will almost write themselves.',
    author: 'Rob Pike',
    source: 'Go Programming Philosophy',
    category: 'programming',
    tags: ['data-structures', 'algorithms', 'design'],
    difficulty: 'advanced',
    createdAt: '2023-03-04T00:00:00Z',
    chineseExplanation: '数据占主导地位。如果你选择了正确的数据结构并组织得当，算法几乎会自己写出来。Go语言设计者Pike强调了数据结构的基础性作用。好的数据结构能够自然地导出简洁高效的算法，而糟糕的数据结构则会让算法变得复杂笨拙。'
  },
  {
    id: '64',
    text: 'The best way to learn is to teach.',
    author: 'Various',
    source: 'Educational Philosophy',
    category: 'philosophy',
    tags: ['teaching', 'learning', 'knowledge'],
    difficulty: 'beginner',
    createdAt: '2023-03-05T00:00:00Z',
    chineseExplanation: '最好的学习方法是教学。这个古老的智慧在编程领域特别适用。当你试图向别人解释一个概念或技术时，你会发现自己理解中的盲点。写技术博客、做技术分享、帮助同事解决问题，都是巩固和深化自己知识的绝佳方式。'
  },
  {
    id: '65',
    text: 'Weeks of programming can save you hours of planning.',
    author: 'Unknown',
    source: 'Software Development Wisdom',
    category: 'management',
    tags: ['planning', 'time', 'efficiency'],
    difficulty: 'intermediate',
    createdAt: '2023-03-06T00:00:00Z',
    chineseExplanation: '几周的编程可以为你节省几小时的规划时间。这是一句讽刺，实际上是在批评急于开始编码而跳过规划的做法。看似节省了规划时间，实际上会在后期花费更多时间来修复设计缺陷。充分的前期规划是必要的投资。'
  },
  {
    id: '66',
    text: 'If you have a procedure with ten parameters, you probably missed some.',
    author: 'Alan Perlis',
    source: 'Epigrams on Programming',
    category: 'programming',
    tags: ['parameters', 'design', 'complexity'],
    difficulty: 'intermediate',
    createdAt: '2023-03-07T00:00:00Z',
    chineseExplanation: '如果你的函数有十个参数，那你可能还漏了一些。Perlis用这句幽默的话指出了过度参数化的问题。当函数需要很多参数时，往往说明函数承担了太多责任或者没有找到合适的抽象。应该考虑重构，将相关参数组合成对象或者拆分函数职责。'
  },
  {
    id: '67',
    text: 'A programming language is low level when its programs require attention to the irrelevant.',
    author: 'Alan Perlis',
    source: 'Epigrams on Programming',
    category: 'programming',
    tags: ['languages', 'abstraction', 'level'],
    difficulty: 'advanced',
    createdAt: '2023-03-08T00:00:00Z',
    chineseExplanation: '当编程语言的程序需要关注无关细节时，它就是低级的。Perlis提供了判断编程语言抽象级别的标准。好的高级语言应该让程序员专注于问题本身，而不是被迫处理与问题无关的技术细节，如内存管理、指针操作等。'
  },
  {
    id: '68',
    text: 'Every program attempts to expand until it can read mail.',
    author: 'Jamie Zawinski',
    source: 'Zawinski\'s Law',
    category: 'philosophy',
    tags: ['feature-creep', 'bloat', 'scope'],
    difficulty: 'intermediate',
    createdAt: '2023-03-09T00:00:00Z',
    chineseExplanation: '每个程序都试图扩展到能够阅读邮件为止。这是Zawinski定律，描述了软件功能蔓延的趋势。程序往往会不断添加新功能，最终变得臃肿复杂。这提醒我们要控制功能范围，保持软件的专注性和简洁性。'
  },
  {
    id: '69',
    text: 'The most likely way for the world to be destroyed, most experts agree, is by accident. That\'s where we come in; we\'re computer professionals. We cause accidents.',
    author: 'Nathaniel Borenstein',
    source: 'Computer Error Humor',
    category: 'philosophy',
    tags: ['accidents', 'responsibility', 'humor'],
    difficulty: 'intermediate',
    createdAt: '2023-03-10T00:00:00Z',
    chineseExplanation: '专家们一致认为，世界最可能被意外摧毁。这就是我们的用武之地；我们是计算机专家，我们制造意外。Borenstein的黑色幽默提醒我们，计算机专家承担着巨大的责任。随着软件在社会中的重要性日益增长，我们的错误可能产生深远影响。'
  },
  {
    id: '70',
    text: 'Most software today is very much like an Egyptian pyramid with millions of bricks piled on top of each other, with no structural integrity, but just done by brute force and thousands of slaves.',
    author: 'Alan Kay',
    source: 'Software Architecture Critique',
    category: 'architecture',
    tags: ['architecture', 'complexity', 'technical-debt'],
    difficulty: 'advanced',
    createdAt: '2023-03-11T00:00:00Z',
    chineseExplanation: '今天的大多数软件就像埃及金字塔，数百万块砖头堆在一起，没有结构完整性，只是靠蛮力和成千上万的奴隶建成的。Kay犀利地批评了现代软件的架构问题：缺乏良好的设计，依靠大量人力强行推进，结果是脆弱且难以维护的系统。'
  },
  {
    id: '71',
    text: 'Object-oriented programming is an exceptionally bad idea which could only have originated in California.',
    author: 'Edsger W. Dijkstra',
    source: 'Programming Paradigm Critique',
    category: 'programming',
    tags: ['oop', 'paradigms', 'criticism'],
    difficulty: 'advanced',
    createdAt: '2023-03-12T00:00:00Z',
    chineseExplanation: '面向对象编程是一个极其糟糕的想法，只有在加利福尼亚才可能产生。Dijkstra对OOP的尖锐批评反映了编程范式之争。虽然OOP有其价值，但也确实可能被过度使用，导致不必要的复杂性。这提醒我们要理性选择编程范式。'
  },
  {
    id: '72',
    text: 'The cheapest, fastest, and most reliable components are those that aren\'t there.',
    author: 'Gordon Bell',
    source: 'Computer Engineering Principles',
    category: 'engineering',
    tags: ['minimalism', 'reliability', 'cost'],
    difficulty: 'intermediate',
    createdAt: '2023-03-13T00:00:00Z',
    chineseExplanation: '最便宜、最快、最可靠的组件是那些不存在的组件。计算机工程师Bell的这句话强调了极简设计的优势。不存在的组件不会故障，不需要维护，也不会增加成本。在系统设计中，能不用的组件就不用，这是工程智慧。'
  },
  {
    id: '73',
    text: 'Unix is simple. It just takes a genius to understand its simplicity.',
    author: 'Dennis Ritchie',
    source: 'Unix Philosophy',
    category: 'philosophy',
    tags: ['unix', 'simplicity', 'understanding'],
    difficulty: 'advanced',
    createdAt: '2023-03-14T00:00:00Z',
    chineseExplanation: 'Unix很简单，只是需要天才才能理解它的简单性。Unix的创造者Ritchie用这种自嘲的方式承认，Unix的"简单"设计实际上需要深厚的理解才能掌握。真正的简单往往隐藏着深刻的洞察，需要时间和经验才能领悟。'
  },
  {
    id: '74',
    text: 'Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.',
    author: 'John Woods',
    source: 'Code Maintenance Philosophy',
    category: 'programming',
    tags: ['maintenance', 'readability', 'humor'],
    difficulty: 'beginner',
    createdAt: '2023-03-15T00:00:00Z',
    chineseExplanation: '编码时要假设最终维护你代码的人是一个知道你住址的暴力精神病患者。Woods用这种极端的比喻强调代码可读性的重要性。为了其他开发者（包括未来的自己）着想，我们应该写出清晰、易懂、有良好注释的代码。'
  },
  {
    id: '75',
    text: 'Computer science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter.',
    author: 'Eric Raymond',
    source: 'The Art of Programming',
    category: 'philosophy',
    tags: ['education', 'experience', 'art'],
    difficulty: 'intermediate',
    createdAt: '2023-03-16T00:00:00Z',
    chineseExplanation: '计算机科学教育不能让任何人成为专家程序员，就像研究画笔和颜料不能让人成为专家画家一样。Raymond指出了理论学习与实践技能的区别。编程是一门需要大量实践的技艺，仅仅学习理论是不够的，必须通过实际项目来培养技能。'
  },
  {
    id: '76',
    text: 'SQL, Lisp, and Haskell are the only programming languages that I\'ve seen where one spends more time thinking than typing.',
    author: 'Philip Greenspun',
    source: 'Programming Language Comparison',
    category: 'programming',
    tags: ['sql', 'lisp', 'haskell', 'thinking'],
    difficulty: 'advanced',
    createdAt: '2023-03-17T00:00:00Z',
    chineseExplanation: 'SQL、Lisp和Haskell是我见过的唯一几种花在思考上的时间比打字更多的编程语言。Greenspun指出了某些语言的特点：它们要求程序员深入思考问题的本质，而不是机械地编写代码。这些语言促进了更高质量的思维过程。'
  },
  {
    id: '77',
    text: 'There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors.',
    author: 'Phil Karlton (Extended)',
    source: 'Classic Programming Humor',
    category: 'programming',
    tags: ['problems', 'humor', 'bugs'],
    difficulty: 'intermediate',
    createdAt: '2023-03-18T00:00:00Z',
    chineseExplanation: '计算机科学中有2个难题：缓存失效、命名和差一错误。这是对经典编程笑话的延续，故意在列举"2个问题"时犯了差一错误（实际列出了3个）。它幽默地展示了程序员经常遇到的边界条件错误，同时强调了这些看似简单却实际困难的问题。'
  },
  {
    id: '78',
    text: 'A computer lets you make more mistakes faster than any other invention, with the possible exceptions of handguns and Tequila.',
    author: 'Mitch Ratcliffe',
    source: 'Technology Humor',
    category: 'philosophy',
    tags: ['mistakes', 'speed', 'humor'],
    difficulty: 'beginner',
    createdAt: '2023-03-19T00:00:00Z',
    chineseExplanation: '计算机让你比其他任何发明都能更快地犯更多错误，除了手枪和龙舌兰酒可能例外。Ratcliffe幽默地指出了计算机的双面性：它既能大大提高我们的效率，也能让错误的影响快速放大。这提醒我们要谨慎使用这个强大的工具。'
  },
  {
    id: '79',
    text: 'If it doesn\'t work, it doesn\'t matter how fast it doesn\'t work.',
    author: 'Mich Ravera',
    source: 'Performance Engineering',
    category: 'programming',
    tags: ['correctness', 'performance', 'priorities'],
    difficulty: 'beginner',
    createdAt: '2023-03-20T00:00:00Z',
    chineseExplanation: '如果程序不能工作，那么它不工作的速度有多快并不重要。Ravera用这种幽默的方式强调了正确性优于性能的原则。一个错误的程序，无论运行得多快都是无用的。我们应该先确保程序正确，再考虑优化性能。'
  },
  {
    id: '80',
    text: 'The internet is the largest experiment in anarchy that there has ever been.',
    author: 'Eric Schmidt',
    source: 'Internet Philosophy',
    category: 'philosophy',
    tags: ['internet', 'anarchy', 'experiment'],
    difficulty: 'intermediate',
    createdAt: '2023-03-21T00:00:00Z',
    chineseExplanation: '互联网是有史以来最大的无政府主义实验。Google前CEO Schmidt观察到了互联网的去中心化特性。没有单一的权威机构控制互联网，这种分布式的治理模式既带来了自由和创新，也产生了挑战和混乱。'
  },
  {
    id: '81',
    text: 'Beware of bugs in the above code; I have only proved it correct, not tried it.',
    author: 'Donald Knuth',
    source: 'Code Documentation',
    category: 'programming',
    tags: ['bugs', 'proof', 'testing'],
    difficulty: 'intermediate',
    createdAt: '2023-03-22T00:00:00Z',
    chineseExplanation: '注意上述代码中的bug；我只是证明了它的正确性，但没有测试过。高德纳的这句话幽默地指出了理论证明与实际测试的区别。即使数学上证明了算法的正确性，实际实现中仍可能存在错误。理论和实践都是必要的。'
  },
  {
    id: '82',
    text: 'Premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%.',
    author: 'Donald Knuth (Complete Quote)',
    source: 'Computer Programming as an Art',
    category: 'programming',
    tags: ['optimization', 'performance', 'balance'],
    difficulty: 'advanced',
    createdAt: '2023-03-23T00:00:00Z',
    chineseExplanation: '过早优化是万恶之源。然而，我们不应该放过那关键的3%的机会。这是Knuth完整名言的第二部分，常被忽略。他并非反对所有优化，而是提醒我们要在正确的时机优化正确的部分。找到那真正影响性能的关键3%并优化它们。'
  },
  {
    id: '83',
    text: 'You can\'t have great software without a great team.',
    author: 'Jim McCarthy',
    source: 'Dynamics of Software Development',
    category: 'management',
    tags: ['team', 'collaboration', 'people'],
    difficulty: 'beginner',
    createdAt: '2023-03-24T00:00:00Z',
    chineseExplanation: '没有优秀的团队就不可能有优秀的软件。McCarthy强调了人的因素在软件开发中的核心地位。技术和工具很重要，但最终是人在创造软件。投资于团队建设、培养合作文化、提升成员技能，是创造优秀软件的基础。'
  },
  {
    id: '84',
    text: 'The best way to get the right answer on the Internet is not to ask a question, but to post the wrong answer.',
    author: 'Ward Cunningham',
    source: 'Cunningham\'s Law',
    category: 'management',
    tags: ['internet', 'knowledge', 'community'],
    difficulty: 'beginner',
    createdAt: '2023-03-25T00:00:00Z',
    chineseExplanation: '在互联网上得到正确答案的最好方法不是提出问题，而是发布错误答案。这就是著名的坎宁安定律。人们更愿意纠正错误而不是回答问题。在开发社区中，这种现象很常见，可以作为获取帮助的策略，但要谨慎使用。'
  },
  {
    id: '85',
    text: 'Code is like humor. When you have to explain it, it\'s bad.',
    author: 'Cory House',
    source: 'Clean Code Philosophy',
    category: 'programming',
    tags: ['code-quality', 'clarity', 'self-documenting'],
    difficulty: 'intermediate',
    createdAt: '2023-03-26T00:00:00Z',
    chineseExplanation: '代码就像幽默。当你必须解释它时，它就是糟糕的。House用这个生动的比喻说明了好代码的特征：自解释性。好的代码应该能够清晰地表达其意图，不需要额外的解释。如果代码需要大量注释来说明其作用，那可能需要重构。'
  },
  {
    id: '86',
    text: 'Experience is the name everyone gives to their mistakes.',
    author: 'Oscar Wilde (Applied to Programming)',
    source: 'Programming Wisdom',
    category: 'philosophy',
    tags: ['experience', 'mistakes', 'learning'],
    difficulty: 'beginner',
    createdAt: '2023-03-27T00:00:00Z',
    chineseExplanation: '经验是每个人给自己犯的错误起的名字。这句话在编程领域特别适用。我们从错误中学习，debug过程让我们理解系统行为，失败的项目教会我们更好的实践。拥抱错误作为学习机会，而不是羞于承认它们。'
  },
  {
    id: '87',
    text: 'Hardware: The parts of a computer system that can be kicked.',
    author: 'Jeff Pesis',
    source: 'Computer Humor',
    category: 'philosophy',
    tags: ['hardware', 'software', 'humor'],
    difficulty: 'beginner',
    createdAt: '2023-03-28T00:00:00Z',
    chineseExplanation: '硬件：计算机系统中可以踢的那些部分。Pesis用这种幽默的定义区分了硬件和软件。虽然是玩笑，但确实捕捉了硬件的物理特性。在调试时，有时我们确实想要"踢"一下不听话的硬件。'
  },
  {
    id: '88',
    text: 'The good news about computers is that they do what you tell them to do. The bad news is that they do what you tell them to do.',
    author: 'Ted Nelson',
    source: 'Computer Philosophy',
    category: 'philosophy',
    tags: ['computers', 'instructions', 'precision'],
    difficulty: 'beginner',
    createdAt: '2023-03-29T00:00:00Z',
    chineseExplanation: '关于计算机的好消息是它们按你的指令行事。坏消息是它们按你的指令行事。Nelson巧妙地指出了计算机的双面性：它们精确执行指令，不会擅自改变，这既是优点也是缺点。当我们的指令有误时，计算机会忠实地执行错误的操作。'
  },
  {
    id: '89',
    text: 'Measuring programming progress by lines of code is like measuring aircraft building progress by weight.',
    author: 'Bill Gates',
    source: 'Software Metrics',
    category: 'management',
    tags: ['metrics', 'measurement', 'quality'],
    difficulty: 'intermediate',
    createdAt: '2023-03-30T00:00:00Z',
    chineseExplanation: '用代码行数衡量编程进度就像用重量衡量飞机制造进度一样。盖茨通过这个类比批评了错误的绩效指标。在飞机制造中，轻量化是目标；在编程中，简洁性往往更有价值。我们需要关注价值和质量，而不是数量。'
  },
  {
    id: '90',
    text: 'Software and cathedrals are much the same — first we build them, then we pray.',
    author: 'Sam Redwine',
    source: 'Software Engineering Humor',
    category: 'philosophy',
    tags: ['software', 'uncertainty', 'hope'],
    difficulty: 'intermediate',
    createdAt: '2023-03-31T00:00:00Z',
    chineseExplanation: '软件和大教堂很相似——我们先建造它们，然后祈祷。Redwine用这种幽默的方式描述了软件开发的不确定性。尽管我们努力设计和测试，但复杂软件的行为仍然难以完全预测。发布后，我们只能希望一切按预期工作。'
  },
  {
    id: '91',
    text: 'In programming, the hard part isn\'t solving problems, but deciding what problems to solve.',
    author: 'Paul Graham',
    source: 'Hackers & Painters',
    category: 'philosophy',
    tags: ['problems', 'priorities', 'decision-making'],
    difficulty: 'advanced',
    createdAt: '2023-04-01T00:00:00Z',
    chineseExplanation: '在编程中，困难的部分不是解决问题，而是决定要解决什么问题。Y Combinator创始人Graham指出了产品开发的核心挑战。技术问题往往有标准解法，但识别值得解决的问题需要洞察力、经验和对用户需求的深刻理解。'
  },
  {
    id: '92',
    text: 'The most disastrous thing that you can ever learn is your first programming language.',
    author: 'Alan Kay',
    source: 'Programming Language Design',
    category: 'philosophy',
    tags: ['learning', 'first-language', 'mindset'],
    difficulty: 'intermediate',
    createdAt: '2023-04-02T00:00:00Z',
    chineseExplanation: '你能学到的最灾难性的东西就是你的第一门编程语言。Kay指出了首次学习带来的认知固化问题。第一门语言会深刻影响我们的编程思维模式，可能限制我们学习其他范式的能力。保持开放心态，学习多种语言和范式是重要的。'
  },
  {
    id: '93',
    text: 'Programming is not a science. Programming is a craft.',
    author: 'Richard Stallman',
    source: 'Free Software Philosophy',
    category: 'philosophy',
    tags: ['craft', 'art', 'skill'],
    difficulty: 'intermediate',
    createdAt: '2023-04-03T00:00:00Z',
    chineseExplanation: '编程不是科学，编程是手艺。自由软件运动领袖Stallman强调了编程的工艺性质。虽然编程使用科学原理，但它更像传统手工艺：需要经验、直觉、美感和个人风格。每个程序员都是独特的工匠，创造着独特的作品。'
  },
  {
    id: '94',
    text: 'Given enough eyeballs, all bugs are shallow.',
    author: 'Linus Torvalds',
    source: 'The Cathedral and the Bazaar',
    category: 'management',
    tags: ['open-source', 'collaboration', 'debugging'],
    difficulty: 'intermediate',
    createdAt: '2023-04-04T00:00:00Z',
    chineseExplanation: '只要有足够的眼球，所有bug都是浅层的。这是Linux之父Torvalds提出的定律，也被称为Linus定律。它解释了开源软件的优势：当有足够多的开发者查看代码时，bug很容易被发现和修复。集体智慧超过个体能力。'
  },
  {
    id: '95',
    text: 'The Internet treats censorship as damage and routes around it.',
    author: 'John Gilmore',
    source: 'Internet Architecture Philosophy',
    category: 'philosophy',
    tags: ['internet', 'censorship', 'resilience'],
    difficulty: 'advanced',
    createdAt: '2023-04-05T00:00:00Z',
    chineseExplanation: '互联网将审查视为损害并绕过它。电子前沿基金会创始人Gilmore描述了互联网的核心特性：去中心化和抗脆弱性。互联网的分布式架构使其能够自动找到替代路径，这种设计哲学影响了整个数字世界的发展。'
  },
  {
    id: '96',
    text: 'Any fool can use a computer. Many do.',
    author: 'Ted Nelson',
    source: 'Computer Literacy',
    category: 'philosophy',
    tags: ['usability', 'literacy', 'access'],
    difficulty: 'beginner',
    createdAt: '2023-04-06T00:00:00Z',
    chineseExplanation: '任何傻瓜都能使用计算机，很多人确实在这样做。Nelson的这句话既是对计算机易用性的赞美，也是对数字素养缺失的担忧。技术变得越来越易用，但真正理解和有效利用技术仍需要教育和思考。'
  },
  {
    id: '97',
    text: 'The best way to predict the future is to implement it.',
    author: 'David Heinemeier Hansson',
    source: 'Ruby on Rails Philosophy',
    category: 'philosophy',
    tags: ['future', 'implementation', 'action'],
    difficulty: 'intermediate',
    createdAt: '2023-04-07T00:00:00Z',
    chineseExplanation: '预测未来的最好方法是实现它。Rails框架创造者DHH对Alan Kay名言的变体。作为开发者，我们不仅要预测技术趋势，更要通过编写代码、构建产品来创造我们想要看到的未来。行动胜过预测。'
  },
  {
    id: '98',
    text: 'Conventional wisdom is often wrong. Fake it till you make it is terrible advice for software engineering.',
    author: 'Jeff Atwood',
    source: 'Software Engineering Practices',
    category: 'philosophy',
    tags: ['wisdom', 'authenticity', 'competence'],
    difficulty: 'intermediate',
    createdAt: '2023-04-08T00:00:00Z',
    chineseExplanation: '传统智慧经常是错误的。"假装直到成功"对软件工程来说是糟糕的建议。Atwood指出在软件开发中，能力和诚实比表面功夫更重要。假装懂得你不懂的技术会带来安全风险和技术债务。承认无知并学习才是正确做法。'
  },
  {
    id: '99',
    text: 'The best code is no code at all. Every new line of code you willingly bring into the world is code that has to be debugged, code that has to be read and understood, code that has to be supported.',
    author: 'Jeff Atwood',
    source: 'The Best Code is No Code At All',
    category: 'programming',
    tags: ['minimalism', 'maintenance', 'cost'],
    difficulty: 'advanced',
    createdAt: '2023-04-09T00:00:00Z',
    chineseExplanation: '最好的代码就是没有代码。你主动带到世界上的每一行新代码都需要调试、阅读理解和维护支持。Atwood详细阐述了代码的真实成本。每行代码都是负债，需要持续投入。在添加代码前，先考虑是否有更简单的解决方案。'
  },
  {
    id: '100',
    text: 'Software is a great combination between artistry and engineering.',
    author: 'Bill Gates',
    source: 'Software Development Philosophy',
    category: 'philosophy',
    tags: ['art', 'engineering', 'balance'],
    difficulty: 'intermediate',
    createdAt: '2023-04-10T00:00:00Z',
    chineseExplanation: '软件是艺术性和工程学的伟大结合。盖茨总结了软件开发的双重性质。它既需要工程师的严谨和逻辑，也需要艺术家的创造力和美感。最好的软件既是技术上的成就，也是设计上的杰作。这种平衡是软件开发的魅力所在。'
  }
];