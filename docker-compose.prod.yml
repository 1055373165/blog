version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: blog_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: blog_db
      POSTGRES_USER: blog_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - blog_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U blog_user -d blog_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: blog_redis_prod
    restart: unless-stopped
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    networks:
      - blog_network
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: blog_backend_prod
    restart: unless-stopped
    environment:
      - GIN_MODE=release
      - ENVIRONMENT=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=blog_user
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=blog_db
      - DB_SSLMODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - API_BASE_URL=https://www.godepth.top
    expose:
      - "3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - blog_network
    volumes:
      - ./data/uploads:/app/uploads
      - ./data/search_index:/app/search_index

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_BASE_URL=https://www.godepth.top
    container_name: blog_frontend_prod
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - blog_network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: blog_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./data/uploads:/var/www/uploads
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - blog_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  blog_network:
    driver: bridge