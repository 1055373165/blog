# Blog 网站配置文件 - 完整的 HTTP + HTTPS 配置
# 上游服务器配置
upstream backend {
    server 127.0.0.1:3001;  # 后端服务映射的宿主机端口
    keepalive 16;
}

upstream frontend {
    server 127.0.0.1:8080;  # 前端服务映射的宿主机端口
    keepalive 16;
}


# HTTP 服务器 - 重定向到 HTTPS
server {
    listen 80;
    server_name www.godepth.top godepth.top;
    
    # 健康检查端点（允许HTTP访问）
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # 所有其他请求重定向到 HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS 服务器 - 主域名 www.godepth.top
server {
    listen 443 ssl http2;
    server_name www.godepth.top;

    # SSL 证书配置
    ssl_certificate /etc/nginx/ssl/godepth.top_bundle.pem;
    ssl_certificate_key /etc/nginx/ssl/godepth.top.key;
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # SSL 安全设置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:!aNULL:!MD5:!RC4:!DHE;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # 安全头
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # 日志配置
    access_log /var/log/nginx/blog_ssl_access.log main;
    error_log /var/log/nginx/blog_ssl_error.log;

    # 健康检查
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # API 代理
    location /api/ {
        # 限流
        limit_req zone=api burst=20 nodelay;
        limit_conn perip 10;
        
        # 代理设置
        proxy_pass http://api_backend/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # 超时设置
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # 缓冲设置
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }

    # 登录接口特殊限流
    location /api/auth/login {
        limit_req zone=login burst=5 nodelay;
        limit_conn perip 3;
        
        proxy_pass http://api_backend/api/auth/login;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }

    # 文件上传
    location /api/upload {
        client_max_body_size 100M;
        proxy_pass http://api_backend/api/upload;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # 静态文件 - 上传的文件
    location /uploads/ {
        alias /var/www/uploads/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Access-Control-Allow-Origin "https://www.godepth.top";
        
        # 安全配置
        location ~* \.(php|jsp|asp|sh|py|pl|exe)$ {
            deny all;
        }
        
        # 图片优化
        location ~* \.(jpg|jpeg|png|gif|webp|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            
            # 如果文件不存在，返回默认图片
            try_files $uri /default-image.png =404;
        }
    }

    # 前端应用代理
    location / {
        # 首先尝试提供静态文件，如果不存在则代理到前端应用
        try_files $uri $uri/ @frontend;
        
        # 静态资源缓存
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            
            # 如果静态文件不存在，代理到前端
            try_files $uri @frontend;
        }
    }

    # 前端应用代理
    location @frontend {
        proxy_pass http://frontend_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # 超时设置
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # robots.txt
    location = /robots.txt {
        alias /var/www/html/robots.txt;
        expires 1d;
        add_header Cache-Control "public, must-revalidate";
    }

    # sitemap.xml
    location = /sitemap.xml {
        proxy_pass http://api_backend;
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
    }

    # 安全配置 - 隐藏敏感文件
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # 限制访问的文件类型
    location ~* \.(sh|bash|py|pl|exe|bat)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # 错误页面
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /var/www/html;
        internal;
    }
    
    location = /50x.html {
        root /var/www/html;
        internal;
    }
}

# HTTPS 服务器 - 裸域名重定向到 www
server {
    listen 443 ssl http2;
    server_name godepth.top;

    # SSL 证书配置（与主站点相同）
    ssl_certificate /etc/nginx/ssl/godepth.top_bundle.pem;
    ssl_certificate_key /etc/nginx/ssl/godepth.top.key;
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # SSL 安全设置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:!aNULL:!MD5:!RC4:!DHE;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # 重定向到 www 版本
    return 301 https://www.godepth.top$request_uri;
}

# 默认服务器配置 (处理未知域名)
server {
    listen 80 default_server;
    listen 443 ssl default_server;
    server_name _;
    
    # 默认SSL证书（防止证书错误）
    ssl_certificate /etc/nginx/ssl/godepth.top_bundle.pem;
    ssl_certificate_key /etc/nginx/ssl/godepth.top.key;
    
    # 拒绝所有未知域名的请求
    return 444;
}